{"version":3,"sources":["utils/compoundApyHelpers.ts","utils/apr.ts","components/ApyCalculatorModal/index.tsx","views/SyrupPools/AprRow.tsx","views/SyrupPools/StyledCard.tsx","views/SyrupPools/CardFooter/ExpandedFooter.tsx","views/SyrupPools/CardFooter/index.tsx","views/SyrupPools/StyledCardHeader.tsx","views/SyrupPools/CardActions/ApprovalAction.tsx","hooks/useSyrupApprove.ts","views/SyrupPools/Modals/NotEnoughTokensModal.tsx","views/SyrupPools/Modals/PercentageButton.tsx","views/SyrupPools/Modals/StakeModal.tsx","hooks/useSyrupStake.ts","hooks/useSyrupUnstake.ts","views/SyrupPools/CardActions/StakeActions.tsx","views/SyrupPools/Modals/CollectModal.tsx","hooks/useSyrupHarvest.ts","views/SyrupPools/CardActions/HarvestActions.tsx","views/SyrupPools/CardActions/index.tsx","views/SyrupPools/Syruppoolcard.tsx","views/SyrupPools/SyruppoolTab.tsx","views/SyrupPools/Syruppools.tsx","views/SyrupPools/Syruppoolsagent.tsx","views/SyrupPools/Syruppoolswrapper.tsx"],"names":["tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BigNumber","times","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolLiquidityUsd","Grid","styled","GridItem","ApyCalculatorModal","onDismiss","earnTokenPrice","linkLabel","linkHref","earningTokenSymbol","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","color","textTransform","mb","maxWidth","freq","toLocaleString","mt","fee","justifyContent","href","AprRow","pool","isAutoVault","stakingToken","earningToken","isFinished","tooltipContent","useTooltip","placement","targetRef","tooltip","tooltipVisible","earningTokenPrice","useGetApiPrice","address","getBalanceNumber","decimals","isHighValueToken","Math","round","apyModalLink","useModal","symbol","onPresentApyModal","alignItems","ref","width","height","Balance","isDisabled","value","earningsPercentageToDisplay","unit","onClick","variant","scale","PromotedGradient","keyframes","StyledCard","Card","theme","colors","isPromotedPool","css","primaryBright","secondary","props","card","background","mediaQueries","sm","StyledCardInner","Box","radii","ExpandedWrapper","Flex","ExpandedFooter","totalCakeInVault","currentBlock","useBlock","startBlock","endBlock","shouldShowBlockCountdown","Boolean","blocksUntilStart","max","blocksRemaining","hasPoolStarted","flexDirection","small","ml","React","memo","ExpandableButtonWrapper","Footer","account","useState","isExpanded","setIsExpanded","manualTooltipText","autoTooltipText","expanded","Wrapper","CardHeader","backgroundDisabled","gradients","StyledCardHeader","stakingTokenSymbol","isStaking","isCakePool","ApprovalAction","isLoading","setNeedsApproval","syrupId","requestedApproval","setRequestedApproval","token","callback","useActiveWeb3React","dispatch","useAppDispatch","syrupPoolContract","getSyrupPoolContractAddress","tokenContract","useTokenContract","inputs","useMemo","allowance","useSingleCallResult","result","toString","undefined","currentallowance","approvalState","gt","ApprovalState","APPROVED","NOT_APPROVED","UNKNOWN","approve","useCallback","a","console","error","estimateGas","MaxUint256","estimatedGas","gasLimit","calculateGasMargin","then","interval","setInterval","updateUserAllowance","clearInterval","catch","useSyrupApprove","toastSuccess","approveCallback","useToast","toastError","handleApprove","message","endIcon","spin","disabled","NotEnoughTokensModal","tokenSymbol","useTheme","headerBackground","cardHeader","name","tokensymbol","as","external","StyledButton","Button","PercentageButton","children","mx","p","StyledLink","Link","StakeModal","stakingMax","isRemovingStake","useSyrupPoolContract","amount","deposit","BIG_TEN","pow","updateUserData","useSyrupStake","setPendingTx","onStake","enableEmergencyWithdraw","emergencyWithdraw","estimatedGas_em","withdraw","useSyrupUnstake","onUnstake","pendingTx","stakeAmount","setStakeAmount","percent","setPercent","usdValueStaked","formatNumber","handleChangePercent","sliderPercent","percentageOfStakingMax","dividedBy","multipliedBy","amountToStake","getFullDisplayBalance","handleConfirmClick","minWidth","src","getENVChainId","alt","onUserInput","input","convertedInput","getDecimalAmount","percentage","floor","min","currencyValue","onValueChanged","valueLabel","step","InlineBalance","StakeAction","stakingTokenBalance","stakedBalance","isStaked","stakingLimit","convertedLimit","isGreaterThan","stakedTokenBalance","stakedTokenDollarBalance","onPresentTokenRequired","onPresentStake","onPresentUnstake","mr","CollectModal","formattedBalance","earningsDollarValue","getReward","useSyrupHarvest","onReward","handleHarvestConfirm","pb","HarvestActions","earnings","earningTokenBalance","earningTokenDollarBalance","fullBalance","hasEarnings","onPresentCollect","InlineText","Text","CardActions","harvest","userData","BIG_ZERO","pendingReward","notEnoughAllowance","needsApproval","display","StakeActions","Syruppoolcard","accountHasStakedBalance","ribbon","variantColor","text","UnlockButton","CardFooter","SyruppoolTab","showHistory","setShowHistory","stakedOnly","setStakedOnly","hasStakeInFinishedPools","activeIndex","onItemClick","index","show","checked","onChange","prev","Syruppools","pools","useSyrupPools","usePersistState","partition","finishedPools","openPools","stakedOnlyFinishedPools","filter","stakedOnlyOpenPools","length","FarmsPageHeader","Page","orderBy","map","Syruppoolsagent","useFetchPublicData","Syruppoolwrapper","RefreshContext"],"mappings":"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","file":"static/js/6.57fad141.chunk.js","sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n\n    const aprAfterFee = farmApr - feeRelativeToApr\n    \n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n\n  return percentage\n}\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR } from 'sdk'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (rewardTokenPrice: number, poolLiquidityUsd: BigNumber, tokenPerBlock: number): number => {\n  const yearlyRewardAllocation = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n\n  const apr = yearlyRewardAllocation.div(poolLiquidityUsd).times(100)\n  \n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  earnTokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  earnTokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / earnTokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {t('per')} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            `Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\n            { freq: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee > 0 && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t(`All estimated rates take into account this pool's %fee%% performance fee`, { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getPoolApr } from 'utils/apr'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\nimport { useGetApiPrice } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { SyrupPool } from 'state/types'\n\ninterface AprRowProps {\n  pool: SyrupPool\n  stakingTokenPrice: number\n  isAutoVault?: boolean\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({\n  pool,\n  stakingTokenPrice,\n  isAutoVault = false,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n\n  const { stakingToken, earningToken, totalStaked, isFinished, tokenPerBlock } = pool\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-end' })\n\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? earningToken.address : '')\n\n  const apr = getPoolApr(\n    stakingTokenPrice,\n    earningTokenPrice,\n    getBalanceNumber(totalStaked, stakingToken.decimals),\n    parseFloat(tokenPerBlock),\n  )\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimals = isHighValueToken ? 4 : 2\n\n  const earningsPercentageToDisplay = () => {\n    if (isAutoVault) {\n      const oneThousandDollarsWorthOfToken = 1000 / earningTokenPrice\n      const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n        numberOfDays: 365,\n        farmApr: apr,\n        tokenPrice: earningTokenPrice,\n        roundingDecimals,\n        compoundFrequency,\n        performanceFee,\n      })\n      return getRoi({\n        amountEarned: tokenEarnedPerThousand365D,\n        amountInvested: oneThousandDollarsWorthOfToken,\n      })\n    }\n    return apr\n  }\n\n  const apyModalLink =\n    stakingToken.address && `/#/swap?outputCurrency=${stakingToken.address}`\n\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      earnTokenPrice={earningTokenPrice}\n      apr={apr}\n      linkLabel={`${t('Get')} ${stakingToken.symbol}`}\n      linkHref={apyModalLink || '/#/swap'}\n      earningTokenSymbol={earningToken.symbol}\n      roundingDecimals={isHighValueToken ? 4 : 2}\n      compoundFrequency={compoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? t('APY') : t('APR')}:</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <Flex alignItems=\"center\">\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay()}\n            decimals={2}\n            unit=\"%\"\n            bold\n          />\n          <IconButton onClick={onPresentApyModal} variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </Flex>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n","import styled, { css, keyframes } from 'styled-components'\nimport { Card, Box } from 'uikit'\n\nconst PromotedGradient = keyframes`\n  0% {\n    background-position: 50% 0%;\n  }\n  50% {\n    background-position: 50% 100%;\n  }\n  100% {\n    background-position: 50% 0%;\n  }\n`\n\nexport const StyledCard = styled(Card)<{ isPromotedPool?: boolean; isFinished?: boolean }>`\n  max-width: 352px;\n  margin: 0 8px 24px;\n  display: flex;\n  flex-direction: column;\n  align-self: baseline;\n  position: relative;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n\n  ${({ isPromotedPool, theme }) =>\n    isPromotedPool\n      ? css`\n          background: linear-gradient(180deg, ${theme.colors.primaryBright}, ${theme.colors.secondary});\n          padding: 1px 1px 3px 1px;\n          background-size: 400% 400%;\n          animation: ${PromotedGradient} 3s ease infinite;\n        `\n      : `background: ${(props) => props.theme.card.background};`}\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin: 0 12px 46px;\n  }\n`\n\nexport const StyledCardInner = styled(Box)<{ isPromotedPool?: boolean }>`\n  background: ${({ theme }) => theme.card.background};\n  border-radius: ${({ isPromotedPool, theme }) => (isPromotedPool ? '31px' : theme.radii.card)};\n`\n\nexport default StyledCard\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport {\n  Flex,\n  Text,\n  TooltipText,\n  TimerIcon,\n  Skeleton,\n  useTooltip,\n} from 'uikit'\n\nimport { useBlock } from 'state/hooks'\n\nimport { SyrupPool } from 'state/types'\n\nimport Balance from 'components/Balance'\n\ninterface ExpandedFooterProps {\n  pool: SyrupPool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandedWrapper = styled(Flex)`\n  svg {\n    height: 14px;\n    width: 14px;\n  }\n`\n\nconst ExpandedFooter: React.FC<ExpandedFooterProps> = ({\n  pool,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n\n  const { currentBlock } = useBlock()\n  \n  const { stakingToken, totalStaked, startBlock, endBlock, isFinished } = pool\n\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-end' },\n  )\n\n  return (\n    <ExpandedWrapper flexDirection=\"column\">\n      <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n        <Text small>{t('Total staked')}:</Text>\n        <Flex alignItems=\"flex-start\">\n          {totalStaked ? (\n            <>\n              <Balance\n                fontSize=\"14px\"\n                decimals={0}\n                value={\n                  isAutoVault\n                    ? getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n                    : getBalanceNumber(totalStaked, stakingToken.decimals)\n                }\n              />\n              <Text ml=\"4px\" fontSize=\"14px\">\n                {stakingToken.symbol}\n              </Text>\n            </>\n          ) : (\n            <Skeleton width=\"90px\" height=\"21px\" />\n          )}\n        </Flex>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {isAutoVault && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          {tooltipVisible && tooltip}\n          <TooltipText ref={targetRef} small>\n            {t('Performance Fee')}\n          </TooltipText>\n          <Flex alignItems=\"center\">\n            <Text ml=\"4px\" small>\n              {performanceFee / 100}%\n            </Text>\n          </Flex>\n        </Flex>\n      )}\n    </ExpandedWrapper>\n  )\n}\n\nexport default React.memo(ExpandedFooter)\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Flex, CardFooter, ExpandableLabel, HelpIcon, useTooltip, Box } from 'uikit'\nimport { SyrupPool } from 'state/types'\nimport { CompoundingPoolTag, ManualPoolTag } from 'components/Tags'\nimport ExpandedFooter from './ExpandedFooter'\n\ninterface FooterProps {\n  pool: SyrupPool\n  account: string\n  performanceFee?: number\n  isAutoVault?: boolean\n  totalCakeInVault?: BigNumber\n}\n\nconst ExpandableButtonWrapper = styled(Flex)`\n  align-items: center;\n  justify-content: space-between;\n  button {\n    padding: 0;\n  }\n`\n\nconst Footer: React.FC<FooterProps> = ({\n  pool,\n  account,\n  performanceFee = 0,\n  isAutoVault = false,\n  totalCakeInVault,\n}) => {\n  const { t } = useTranslation()\n  \n  const [isExpanded, setIsExpanded] = useState(false)\n\n  const manualTooltipText = t('You must harvest and compound your earnings from this pool manually.')\n  const autoTooltipText = t(\n    'Any funds you stake in this pool will be automagically harvested and restaked (compounded) for you.',\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(isAutoVault ? autoTooltipText : manualTooltipText, {\n    placement: 'bottom-end',\n  })\n\n  return (\n    <CardFooter>\n      <ExpandableButtonWrapper>\n        <Flex alignItems=\"center\">\n          {isAutoVault ? <CompoundingPoolTag /> : <ManualPoolTag />}\n          {tooltipVisible && tooltip}\n          <Box ref={targetRef}>\n            <HelpIcon ml=\"4px\" width=\"20px\" height=\"20px\" color=\"textSubtle\" />\n          </Box>\n        </Flex>\n        <ExpandableLabel expanded={isExpanded} onClick={() => setIsExpanded(!isExpanded)}>\n          {isExpanded ? t('Hide') : t('Details')}\n        </ExpandableLabel>\n      </ExpandableButtonWrapper>\n      {isExpanded && (\n        <ExpandedFooter\n          pool={pool}\n          account={account}\n          performanceFee={performanceFee}\n          isAutoVault={isAutoVault}\n          totalCakeInVault={totalCakeInVault}\n        />\n      )}\n    </CardFooter>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { CardHeader, Heading, Text, Flex } from 'uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string; isPromotedPool?: boolean }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme, isPromotedPool }) =>\n    isPromotedPool ? '31px 31px 0 0' : `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningTokenSymbol: string\n  stakingTokenSymbol: string\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n  isPromotedPool?: boolean\n}> = ({\n  earningTokenSymbol,\n  stakingTokenSymbol,\n  isFinished = false,\n  isAutoVault = false,\n  isStaking = false,\n  isPromotedPool = false,\n}) => {\n  const { t } = useTranslation()\n \n  const isCakePool = earningTokenSymbol === 'CAKE' && stakingTokenSymbol === 'CAKE'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return `${t('Auto')}`\n    }\n    if (isCakePool) {\n      // manual cake\n      return `${t('Manual')}`\n    }\n    // all other pools\n    return `${t('Earn')}`\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return `${t('Automatic restaking')}`\n    }\n    if (isCakePool) {\n      return `${t('Earn CAKE, stake CAKE')}`\n    }\n    return `${t('Stake')} ${stakingTokenSymbol}`\n  }\n\n  return (\n    <Wrapper isPromotedPool={isPromotedPool} isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningTokenSymbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n","import React, { useState, useCallback } from 'react'\nimport { Button, AutoRenewIcon, Skeleton } from 'uikit'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport useSyrupApprove from 'hooks/useSyrupApprove'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { SyrupPool } from 'state/types'\n\ninterface ApprovalActionProps {\n  pool: SyrupPool\n\n  isLoading?: boolean\n\n  setNeedsApproval\n}\n\nconst ApprovalAction: React.FC<ApprovalActionProps> = ({ pool, isLoading = false, setNeedsApproval}) => {\n  const { syrupId, stakingToken, earningToken, isFinished } = pool\n\n  const { t } = useTranslation()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const callback = () =>\n  {\n    toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`)\n       \n    setRequestedApproval(false)\n\n    setNeedsApproval(false)\n  }\n\n  const [ approvalState, approveCallback ] = useSyrupApprove(stakingToken, syrupId, callback)\n\n  const { toastSuccess, toastError } = useToast()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n\n      await approveCallback()\n      \n      if (approvalState ===  ApprovalState.UNKNOWN) {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n\n        setRequestedApproval(false)\n      }  else if (approvalState === ApprovalState.APPROVED)\n      {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the ${earningToken.symbol} pool!`)}`)\n       \n        setRequestedApproval(false)\n    \n        setNeedsApproval(false)\n      }\n    } catch (e) {\n      console.error(e)\n      toastError('Error', e?.message)\n    }\n  }, [approvalState, approveCallback, setRequestedApproval, toastError, t, earningToken, setNeedsApproval, toastSuccess])\n\n  return (\n    <>\n      {isLoading ? (\n        <Skeleton width=\"100%\" height=\"52px\" />\n      ) : (\n        <Button\n          isLoading={requestedApproval}\n          endIcon={requestedApproval ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          disabled={isFinished || requestedApproval}\n          onClick={handleApprove}\n          width=\"100%\"\n        >\n          {t('Enable')}\n        </Button>\n      )}\n    </>\n  )\n}\n\nexport default ApprovalAction\n","import { useCallback, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { useActiveWeb3React } from 'hooks'\nimport { Token } from 'sdk'\nimport { getSyrupPoolContractAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { updateUserAllowance } from 'state/actions'\nimport { calculateGasMargin } from '../utils'\nimport { ApprovalState } from './useApproveCallback'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nexport default function useSyrupApprove(\n  token: Token, syrupId, callback: any\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n  \n  const syrupPoolContract = getSyrupPoolContractAddress(syrupId)\n\n  const tokenContract = useTokenContract(token.address)\n\n  const inputs = useMemo(() => [account, syrupPoolContract], [account, syrupPoolContract])\n\n  const allowance = useSingleCallResult(tokenContract, 'allowance', inputs).result\n\n  const [ currentallowance ] = useMemo(() => [allowance ? new BigNumber(allowance.toString()) : undefined], [allowance])\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!token || !syrupPoolContract) return ApprovalState.UNKNOWN\n\n    if (!currentallowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentallowance.gt(0) ? ApprovalState.APPROVED : ApprovalState.NOT_APPROVED\n  }, [token, syrupPoolContract, currentallowance])\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n\n      return\n    }\n\n    if (!syrupPoolContract) {\n      console.error('no spender')\n\n      return\n    }\n\n    const estimatedGas = await tokenContract.estimateGas.approve(syrupPoolContract, MaxUint256)\n\n    // eslint-disable-next-line consistent-return\n    tokenContract\n           .approve(syrupPoolContract, MaxUint256, { gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n             const interval = setInterval(async () => {\n                dispatch(updateUserAllowance(syrupId, account)).then(\n                  () =>\n                  {\n                   clearInterval(interval)   \n\n                   callback()     \n                  }\n                 )\n              }, 6000)\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, tokenContract, syrupPoolContract, dispatch, syrupId, account, callback])\n\n  return [approvalState, approve]\n}\n\n \n \n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Modal, Text, Button } from 'uikit'\nimport useTheme from 'hooks/useTheme'\n\ninterface NotEnoughTokensModalProps {\n  tokenSymbol: string\n  onDismiss?: () => void\n}\n\nconst NotEnoughTokensModal: React.FC<NotEnoughTokensModalProps> = ({ tokenSymbol, onDismiss }) => {\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  return (\n    <Modal\n      title={`${tokenSymbol} ${t('required')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >   \n      <Text color=\"failure\" bold>\n        {t('insufficientBalance', { name: tokenSymbol })}\n      </Text>\n      <Text mt=\"24px\">{t(`You’ll need %tokensymbol% to stake in this pool!`, { tokensymbol: tokenSymbol })}</Text>\n      <Text>\n        {t(`Buy some %tokensymbol%, or make sure your %tokensymbol% isn’t in another pool or LP.`, {\n          tokensymbol: tokenSymbol,\n        })}\n      </Text>\n      <Button mt=\"24px\" as=\"a\" external href=\"/#/swap\">\n        {t('Buy')} {tokenSymbol}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss}>\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default NotEnoughTokensModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'uikit'\n\ninterface PercentageButtonProps {\n  onClick: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst PercentageButton: React.FC<PercentageButtonProps> = ({ children, onClick }) => {\n  return (\n    <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={onClick}>\n      {children}\n    </StyledButton>\n  )\n}\n\nexport default PercentageButton\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { getENVChainId } from 'sdk'\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, Link } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useSyrupStake from 'hooks/useSyrupStake'\nimport useSyrupUnstake from 'hooks/useSyrupUnstake'\nimport useTheme from 'hooks/useTheme'\nimport useToast from 'hooks/useToast'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { SyrupPool } from 'state/types'\nimport PercentageButton from './PercentageButton'\n\ninterface StakeModalProps {\n  pool: SyrupPool\n  stakingMax: BigNumber\n  stakingTokenPrice: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledLink = styled(Link)`\n  width: 100%;\n`\n\nconst StakeModal: React.FC<StakeModalProps> = ({\n  pool,\n  stakingMax,\n  stakingTokenPrice,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const { syrupId, stakingToken, earningToken } = pool\n\n  const { t } = useTranslation()\n\n  const { theme } = useTheme()\n\n  const stakeCall = () =>\n  {\n    toastSuccess(`${t('Staked')}!`, t(`Your ${stakingToken.symbol} funds have been staked in the pool!`))\n\n    setPendingTx(false)\n    \n    onDismiss()\n  }\n\n  const [ onStake ] = useSyrupStake(syrupId, stakeCall)\n\n  const unstakeCall = () =>\n  {\n    toastSuccess(\n      `${t('Unstaked')}!`,\n      t(`Your ${earningToken.symbol} earnings have also been harvested to your wallet!`),\n    )\n\n    setPendingTx(false)\n    \n    onDismiss()\n  }\n\n  const [ onUnstake ] = useSyrupUnstake(syrupId, pool.enableEmergencyWithdraw, unstakeCall)\n\n  const { toastSuccess, toastError } = useToast()\n\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const [stakeAmount, setStakeAmount] = useState('')\n\n  const [percent, setPercent] = useState(0)\n\n  const usdValueStaked = stakeAmount && formatNumber(new BigNumber(stakeAmount).times(stakingTokenPrice).toNumber())\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = getDecimalAmount(new BigNumber(input), stakingToken.decimals)\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(Math.min(percentage, 100))\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleConfirmClick = async () => {\n    setPendingTx(true)\n\n    if (isRemovingStake) {\n      // unstaking\n      try {\n        await onUnstake(stakeAmount, stakingToken.decimals)\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    } else {\n      try {\n        // staking\n        await onStake(stakeAmount, stakingToken.decimals)\n\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Syrup Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/coins/${getENVChainId()}/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={`~${usdValueStaked || 0} USD`}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t(\"Balance\")}: {getFullDisplayBalance(stakingMax, stakingToken.decimals)}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <PercentageButton onClick={() => handleChangePercent(25)}>25%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(50)}>50%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(75)}>75%</PercentageButton>\n        <PercentageButton onClick={() => handleChangePercent(100)}>MAX</PercentageButton>\n      </Flex>\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <StyledLink external href='/#/swap'>\n          <Button width=\"100%\" mt=\"8px\" variant=\"secondary\">\n            {t('getLP', { name: stakingToken.symbol})}\n          </Button>\n        </StyledLink>\n      )}\n    </Modal>\n  )\n}\n\nexport default StakeModal\n","import { BIG_TEN } from 'sdk'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useActiveWeb3React } from 'hooks'\nimport { updateUserData } from 'state/actions'\nimport { useSyrupPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useSyrupStake(\n  syrupId, callback: any\n): [ (amount: string, decimals: number) => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const syrupPoolContract = useSyrupPoolContract(syrupId)\n  \n  const onStake = useCallback(async (amount: string, decimals = 18): Promise<void> => {\n    if (!syrupPoolContract) {\n      console.error('syrup pool contract is null')\n\n      return\n    }\n\n    const estimatedGas = await syrupPoolContract.estimateGas.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n                                                      \n    // eslint-disable-next-line consistent-return\n    syrupPoolContract\n           .deposit((new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()), { gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n            const interval = setInterval(async () => {\n              dispatch(updateUserData(syrupId, account)).then(\n                () =>\n                {\n                 clearInterval(interval)   \n\n                 callback()     \n                }\n               )\n            }, 6000)\n        \n      })\n      .catch((error: Error) => {\n        console.error('Failed to stake token', error)\n        throw error\n      })\n    \n  }, [syrupPoolContract, dispatch, syrupId, account, callback])\n\n  return [ onStake ]\n}","import { useCallback } from 'react'\nimport { useActiveWeb3React } from 'hooks'\nimport { BIG_TEN } from 'sdk'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserData } from 'state/actions'\nimport { useSyrupPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useSyrupUnstake(\n  syrupId, enableEmergencyWithdraw = false, callback: any\n): [ (amount: string, decimals: number) => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const syrupPoolContract = useSyrupPoolContract(syrupId)\n  \n  const onUnstake = useCallback(async (amount: string, decimals = 18): Promise<void> => {\n    if (!syrupPoolContract) {\n      console.error('syrup pool contract is null')\n\n      return\n    }\n\n    if (enableEmergencyWithdraw) {\n      const estimatedGas_em = await syrupPoolContract.estimateGas.emergencyWithdraw()\n                                                      \n      // eslint-disable-next-line consistent-return\n      syrupPoolContract\n             .emergencyWithdraw({ gasLimit: calculateGasMargin(estimatedGas_em) })\n             .then(() => {\n              const interval = setInterval(async () => {\n                dispatch(updateUserData(syrupId, account)).then(\n                  () =>\n                  {\n                   clearInterval(interval)   \n  \n                   callback()     \n                  }\n                 )\n              }, 6000)\n        })\n        .catch((error: Error) => {\n          console.error('Failed to approve token', error)\n          throw error\n        })\n    } \n    else {\n      const estimatedGas = await syrupPoolContract.estimateGas.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n                                                      \n      // eslint-disable-next-line consistent-return\n      syrupPoolContract\n             .withdraw((new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()), { gasLimit: calculateGasMargin(estimatedGas) })\n             .then(() => {  \n              const interval = setInterval(async () => {\n                dispatch(updateUserData(syrupId, account)).then(\n                  () =>\n                  {\n                   clearInterval(interval)   \n  \n                   callback()     \n                  }\n                 )\n              }, 6000)\n        })\n        .catch((error: Error) => {\n          console.error('Failed to unstake token', error)\n          throw error\n        })\n    }\n    \n  }, [syrupPoolContract, dispatch, syrupId, account, callback, enableEmergencyWithdraw])\n\n  return [ onUnstake ]\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton } from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getDecimalAmount } from 'utils/formatBalance'\nimport { SyrupPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: SyrupPool\n  stakingTokenBalance: BigNumber\n  stakingTokenPrice: number\n  stakedBalance: BigNumber\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst InlineBalance = styled(Balance)`\n  display: inline;\n`\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakingTokenPrice,\n  stakedBalance,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, earningToken, stakingLimit, isFinished } = pool\n  const { t } = useTranslation()\n  const convertedLimit = getDecimalAmount(new BigNumber(stakingLimit), earningToken.decimals)\n  const stakingMax =\n    stakingLimit && stakingTokenBalance.isGreaterThan(convertedLimit) ? convertedLimit : stakingTokenBalance\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal stakingMax={stakingMax} pool={pool} stakingTokenPrice={stakingTokenPrice} />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingMax={stakedBalance}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              ~\n              <InlineBalance\n                fontSize=\"12px\"\n                color=\"textSubtle\"\n                decimals={2}\n                value={stakedTokenDollarBalance}\n                unit=\" USD\"\n              />\n            </Text>\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          <IconButton\n            variant=\"secondary\"\n            onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n            disabled={isFinished}\n          >\n            <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n          </IconButton>\n        </Flex>\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\n\nimport {\n  Modal,\n  Text,\n  Button,\n  Heading,\n  Flex,\n  AutoRenewIcon,\n} from 'uikit'\n\nimport { useTranslation } from 'contexts/Localization'\n\nimport useTheme from 'hooks/useTheme'\n\nimport useSyrupHarvest from 'hooks/useSyrupHarvest'\n\nimport useToast from 'hooks/useToast'\n\nimport { Token } from 'sdk/types'\n\ninterface CollectModalProps {\n  formattedBalance: string\n  fullBalance: string\n  earningToken: Token\n  earningsDollarValue: string\n  syrupId: number\n  onDismiss?: () => void\n}\n\nconst CollectModal: React.FC<CollectModalProps> = ({\n  formattedBalance,\n  earningToken,\n  earningsDollarValue,\n  syrupId,\n  onDismiss,\n}) => {\n  const { t } = useTranslation()\n\n  const { theme } = useTheme()\n\n  const { toastSuccess, toastError } = useToast()\n\n  const rewardCallBack = () =>\n  {\n    toastSuccess(`${t('Harvested')}!`, t(`Your ${earningToken.symbol} earnings have been sent to your wallet!`))\n    \n    setPendingTx(false)\n    \n    onDismiss()\n  }\n\n  const [ onReward ] = useSyrupHarvest(syrupId, rewardCallBack)\n\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const handleHarvestConfirm = async () => {\n    setPendingTx(true)\n\n      // harvesting\n      try {\n        await onReward()\n\n      } catch (e) {\n        toastError(t('Canceled'), t('Please try again and confirm the transaction.'))\n        setPendingTx(false)\n      }\n  }\n\n  return (\n    <Modal\n      title={`${earningToken.symbol} ${t('Harvest')}`}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Text>{t('Harvesting')}:</Text>\n        <Flex flexDirection=\"column\">\n          <Heading>\n            {formattedBalance} {earningToken.symbol}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"textSubtle\">{`~${earningsDollarValue || 0} USD`}</Text>\n        </Flex>\n      </Flex>\n\n      <Button\n        mt=\"8px\"\n        onClick={handleHarvestConfirm}\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      <Button variant=\"text\" onClick={onDismiss} pb=\"0px\">\n        {t('Close window')}\n      </Button>\n    </Modal>\n  )\n}\n\nexport default CollectModal\n","import { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useActiveWeb3React } from 'hooks'\nimport { updateUserData } from 'state/actions'\nimport { useSyrupPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useSyrupHarvest(\n  syrupId, callback: any\n): [ () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const syrupPoolContract = useSyrupPoolContract(syrupId)\n  \n  const onReward = useCallback(async (): Promise<void> => {\n    if (!syrupPoolContract) {\n      console.error('syrup pool contract is null')\n\n      return\n    }\n\n    const estimatedGas = await syrupPoolContract.estimateGas.getReward()\n                                                      \n    // eslint-disable-next-line consistent-return\n    syrupPoolContract\n           .getReward({ gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n            const interval = setInterval(async () => {\n              dispatch(updateUserData(syrupId, account)).then(\n                () =>\n                {\n                 clearInterval(interval)   \n\n                 callback()     \n                }\n               )\n            }, 6000)\n      })\n      .catch((error: Error) => {\n        console.error('Failed to harvest token', error)\n        throw error\n      })\n    \n  }, [syrupPoolContract, dispatch, syrupId, account, callback])\n\n  return [ onReward ]\n}\n\n \n","import React from 'react'\nimport { Flex, Text, Button, Heading, useModal, Skeleton } from 'uikit'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Token } from 'sdk/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance, getBalanceNumber, formatNumber } from 'utils/formatBalance'\nimport { useGetApiPrice } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport CollectModal from '../Modals/CollectModal'\n\ninterface HarvestActionsProps {\n  earnings: BigNumber\n  earningToken: Token\n  syrupId: number\n  isLoading?: boolean\n}\n\nconst InlineBalance = styled(Balance)`\n  display: inline;\n`\n\nconst HarvestActions: React.FC<HarvestActionsProps> = ({\n  earnings,\n  earningToken,\n  syrupId,\n  isLoading = false,\n}) => {\n  const { t } = useTranslation()\n\n  const earningTokenPrice = useGetApiPrice(earningToken.address ? earningToken.address : '')\n\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  \n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n \n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n \n  const earningsDollarValue = formatNumber(earningTokenDollarBalance)\n \n  const hasEarnings = earnings.toNumber() > 0\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningsDollarValue}\n      syrupId={syrupId}\n    />,\n  )\n\n  return (\n    <Flex flexDirection=\"column\" mb=\"16px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          {isLoading ? (\n            <Skeleton width=\"80px\" height=\"48px\" />\n          ) : (\n            <>\n              {hasEarnings ? (\n                <Balance bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n              ) : (\n                <Heading color=\"textDisabled\">0</Heading>\n              )}\n              <Text fontSize=\"12px\" color={hasEarnings ? 'textSubtle' : 'textDisabled'}>\n                ~\n                {hasEarnings ? (\n                  <InlineBalance\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                ) : (\n                  '0 USD'\n                )}\n              </Text>\n            </>\n          )}\n        </Flex>\n        <Flex>\n          <Button disabled={!hasEarnings} onClick={onPresentCollect}>\n            { t('Harvest')}\n          </Button>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default HarvestActions\n","import BigNumber from 'bignumber.js'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { BIG_ZERO } from 'sdk'\nimport { Flex, Text, Box } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { SyrupPool } from 'state/types'\nimport ApprovalAction from './ApprovalAction'\nimport StakeActions from './StakeActions'\nimport HarvestActions from './HarvestActions'\n\nconst InlineText = styled(Text)`\n  display: inline;\n`\n\ninterface CardActionsProps {\n  pool: SyrupPool\n\n  stakedBalance: BigNumber,\n\n  stakingTokenPrice: number\n}\n\nconst CardActions: React.FC<CardActionsProps> = ({ pool, stakedBalance, stakingTokenPrice }) => {\n  const { syrupId, stakingToken, earningToken, harvest, userData } = pool\n  // Pools using native BNB behave differently than pools using a token\n\n  const { t } = useTranslation()\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n \n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n \n  const notEnoughAllowance = !allowance.gt(0)\n\n  const [needsApproval, setNeedsApproval] = useState(notEnoughAllowance)\n\n  if(needsApproval !== notEnoughAllowance)\n  {\n    setNeedsApproval(notEnoughAllowance);\n  }\n\n  const isStaked = stakedBalance.gt(0)\n\n  const isLoading = !userData\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex flexDirection=\"column\">\n        {harvest && (\n          <>\n            <Box display=\"inline\">\n              <InlineText color=\"secondary\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {`${earningToken.symbol} `}\n              </InlineText>\n              <InlineText color=\"textSubtle\" textTransform=\"uppercase\" bold fontSize=\"12px\">\n                {t(`Earned`)}\n              </InlineText>\n            </Box>\n            <HarvestActions\n              earnings={earnings}\n              earningToken={earningToken}\n              syrupId={syrupId}\n              isLoading={isLoading}\n            />\n          </>\n        )}\n        <Box display=\"inline\">\n          <InlineText color={isStaked ? 'secondary' : 'textSubtle'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? stakingToken.symbol : t(`Stake`)}{' '}\n          </InlineText>\n          <InlineText color={isStaked ? 'textSubtle' : 'secondary'} textTransform=\"uppercase\" bold fontSize=\"12px\">\n            {isStaked ? t(`Staked`) : `${stakingToken.symbol}`}\n          </InlineText>\n        </Box>\n        {needsApproval ? (\n          <ApprovalAction pool={pool} isLoading={isLoading} setNeedsApproval={setNeedsApproval}/>\n        ) : (\n          <StakeActions\n            isLoading={isLoading}\n            pool={pool}\n            stakingTokenBalance={stakingTokenBalance}\n            stakingTokenPrice={stakingTokenPrice}\n            stakedBalance={stakedBalance}\n            isStaked={isStaked}\n          />\n        )}\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default CardActions\n","import BigNumber from 'bignumber.js'\nimport React from 'react'\nimport { BIG_ZERO } from 'sdk'\nimport { CardBody, Flex, Text, CardRibbon } from 'uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetApiPrice } from 'state/hooks'\nimport { SyrupPool } from 'state/types'\nimport AprRow from './AprRow'\nimport { StyledCard, StyledCardInner } from './StyledCard'\nimport CardFooter from './CardFooter'\nimport StyledCardHeader from './StyledCardHeader'\nimport CardActions from './CardActions'\n\nconst Syruppoolcard: React.FC<{ pool: SyrupPool; account: string; }> = ({ pool, account }) => {\n  const { syrupId, stakingToken, earningToken, isFinished, userData } = pool\n\n  const { t } = useTranslation()\n\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  \n  const accountHasStakedBalance = stakedBalance.gt(0)\n  \n  const stakingTokenPrice = useGetApiPrice(stakingToken.address ? stakingToken.address : '')\n\n  return (\n    <StyledCard\n      isFinished={isFinished && syrupId !== 0}\n      ribbon={isFinished && <CardRibbon variantColor=\"textDisabled\" text={`${t('Finished')}`} />}\n    >\n      <StyledCardInner>\n        <StyledCardHeader\n          isStaking={accountHasStakedBalance}\n          earningTokenSymbol={earningToken.symbol}\n          stakingTokenSymbol={stakingToken.symbol}\n          isFinished={isFinished && syrupId !== 0}\n        />\n        <CardBody>\n          <AprRow pool={pool} stakingTokenPrice={stakingTokenPrice} />\n          <Flex mt=\"24px\" flexDirection=\"column\">\n            {account ? (\n              <CardActions pool={pool} stakedBalance={stakedBalance} stakingTokenPrice={stakingTokenPrice} />\n            ) : (\n              <>\n                <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                  {t('Start Earning')}\n                </Text>\n                <UnlockButton />\n              </>\n            )}\n          </Flex>\n        </CardBody>\n        <CardFooter pool={pool} account={account} />\n      </StyledCardInner>\n    </StyledCard>\n  )\n}\n\nexport default Syruppoolcard\n","import React from 'react'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Toggle,\n  Text,\n  Flex,\n  NotificationDot,\n} from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst SyruppoolTab = ({ showHistory, setShowHistory, stakedOnly, setStakedOnly, hasStakeInFinishedPools }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"32px\">\n      <Flex alignItems=\"center\" flexDirection={['column', null, 'row', null]}>\n        <ButtonMenu activeIndex={showHistory ? 1 : 0} onItemClick={(index) => setShowHistory(index === 1)} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem>\n            {t('Live')}\n          </ButtonMenuItem>\n          <NotificationDot show={hasStakeInFinishedPools}>\n            <ButtonMenuItem>\n              {t('Finished')}\n            </ButtonMenuItem>\n          </NotificationDot>\n        </ButtonMenu>\n        <Flex mt={['4px', null, 0, null]} ml={[0, null, '24px', null]} justifyContent=\"center\" alignItems=\"center\">\n          <Toggle scale=\"sm\" checked={stakedOnly} onChange={() => setStakedOnly((prev) => !prev)} />\n          <Text ml=\"8px\">{t('Staked only')}</Text>\n        </Flex>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default SyruppoolTab\n","import React, { useMemo } from 'react'\r\nimport FarmsPageHeader from 'components/FarmsPageHeader'\r\nimport Page from 'components/layout/Page'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { Heading, Flex } from 'uikit'\r\nimport orderBy from 'lodash/orderBy'\r\nimport partition from 'lodash/partition'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useSyrupPools, useBlock } from 'state/hooks'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Syruppoolcard from './Syruppoolcard'\r\nimport SyruppoolTab from './SyruppoolTab'\r\n\r\nconst Syruppools: React.FC = () => {\r\n    const { t } = useTranslation()\r\n\r\n    const { account } = useActiveWeb3React()\r\n\r\n    const pools = useSyrupPools(account)\r\n\r\n    const { currentBlock } = useBlock()\r\n\r\n    const [stakedOnly, setStakedOnly] = usePersistState(false, 'grampus_syrup_pool_staked')\r\n\r\n    const [showHistory, setShowHistory] = usePersistState(true, 'grampus_syrup_pool_history')\r\n \r\n    const [finishedPools, openPools] = useMemo(\r\n      () => partition(pools, (pool) => pool.isFinished || (currentBlock > pool.endBlock && pool.endBlock > 0)),\r\n      [currentBlock, pools],\r\n    )\r\n\r\n    const stakedOnlyFinishedPools = useMemo(\r\n      () => finishedPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\r\n      [finishedPools],\r\n    )\r\n\r\n    const stakedOnlyOpenPools = useMemo(\r\n      () => openPools.filter((pool) => pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)),\r\n      [openPools],\r\n    )\r\n\r\n    const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\r\n\r\n    return (\r\n      <>\r\n        <FarmsPageHeader>\r\n         <Flex justifyContent=\"space-between\" flexDirection={['column', null, 'row']}>\r\n            <Flex flexDirection=\"column\" mr={['8px', 0]}>\r\n              <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n                {t('Stake Pools')}\r\n              </Heading>\r\n              <Heading scale=\"md\" color=\"text\">\r\n                {t('Stake some tokens to earn new tokens')}\r\n              </Heading>\r\n            </Flex>\r\n          </Flex>\r\n        </FarmsPageHeader>\r\n        <Page>\r\n        <SyruppoolTab\r\n          showHistory={showHistory}\r\n          setShowHistory={setShowHistory}\r\n          stakedOnly={stakedOnly}\r\n          setStakedOnly={setStakedOnly}\r\n          hasStakeInFinishedPools={hasStakeInFinishedPools}\r\n        />\r\n        { !showHistory ? <FlexLayout>\r\n            <> \r\n              {stakedOnly\r\n                ? orderBy(stakedOnlyOpenPools, ['sortOrder']).map((pool) => (\r\n                    <Syruppoolcard key={pool.syrupId} pool={pool} account={account} />\r\n                  ))\r\n                : orderBy(openPools, ['sortOrder']).map((pool) => (\r\n                    <Syruppoolcard key={pool.syrupId} pool={pool} account={account} />\r\n                  ))}\r\n            </>\r\n        </FlexLayout>\r\n        : <FlexLayout> \r\n          <> \r\n          {stakedOnly\r\n              ? orderBy(stakedOnlyFinishedPools, ['sortOrder']).map((pool) => (\r\n                  <Syruppoolcard key={pool.syrupId} pool={pool} account={account} />\r\n                ))\r\n              : orderBy(finishedPools, ['sortOrder']).map((pool) => (\r\n                  <Syruppoolcard key={pool.syrupId} pool={pool} account={account} />\r\n                ))} \r\n           </>\r\n        </FlexLayout> }\r\n      </Page>\r\n      </>\r\n    )   \r\n}\r\n \r\nexport default Syruppools\r\n","import React from 'react'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport Syruppools from './Syruppools'\r\n\r\nconst Syruppoolsagent : React.FC = () => {\r\n    useFetchPublicData()\r\n\r\n    return (\r\n     <>\r\n       <Syruppools />\r\n     </>\r\n    );\r\n}\r\n\r\nexport default Syruppoolsagent","import React from 'react'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport Syruppoolsagent from './Syruppoolsagent'\r\n\r\nconst Syruppoolwrapper: React.FC = () => {\r\n    return (\r\n      <RefreshContextProvider>\r\n        <Syruppoolsagent />\r\n      </RefreshContextProvider>\r\n    );\r\n}\r\n\r\nexport default Syruppoolwrapper"],"sourceRoot":""}