{"version":3,"sources":["views/NftSellPage/NftSellPageTab.tsx","views/NftSellPage/NftSellPageGrid.tsx","views/NftSellPage/NftSellPageCard.tsx","views/NftSellPage/NftSellPageContent.tsx","views/NftSellPage/NftSellPage.tsx","views/NftSellPage/NftSellPageagent.tsx","views/NftSellPage/NftSellPagewrapper.tsx"],"names":["NftSellPageTab","selectPayToken","handlePayTokenChange","isDesc","handleDescChange","options","onRefresh","t","useTranslation","selectStyles","container","styles","width","alignItems","justifyContent","mb","flexDirection","fontSize","bold","mr","color","value","onChange","ml","scale","checked","onClick","NftSellPageGrid","styled","div","theme","mediaQueries","sm","md","RootContainer","Container","colors","cardBorder","NftSellPageCardElement","params","JSON","parse","nftKey","owner","paytoken","tokenid","price","isOwner","useActiveWeb3React","account","nftModeMeta","useNftMeta","useState","meta","loading","isloading","setIsLoading","dispatch","useAppDispatch","useEffect","fetchNftMetaAsync","uri","then","prices","useGetApiPrices","ethPrice","paytokens","getNftPayTokens","priceTokenPrice","ADDRESS0","priceTokenSymbol","getETHId","find","token","address","symbol","priceNumber","getBalanceNumber","decimals","priceDollar","isHighValue","Math","round","isActive","Loader","history","push","NftMediaPreviewElement","name","toFixed","NftSellPageCard","React","memo","prev","next","NftSellPageContent","nft","asks","onCommitSuccess","cards","map","ask","stringify","refresh","StyledHeader","textSubtle","ControlContainer","NftSellPage","label","concat","queryConditions","useNftOnsellPageQC","pageModule","useNftOnsells","version","module","fetchAsksAsync","page","pagesize","desc","fetchPayTokenAsksAsync","Page","as","setOnSellPageQCVersion","setOnSellPageQCDesc","selectedPayToken","selected","setOnSellPageQCSelectedPayToken","NftSellPageagent","NftSellPagewrapper"],"mappings":"gRAwCeA,EA9BQ,SAAC,GAA4F,IAA1FC,EAAyF,EAAzFA,eAAgBC,EAAyE,EAAzEA,qBAAsBC,EAAmD,EAAnDA,OAAQC,EAA2C,EAA3CA,iBAAkBC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,UACzFC,EAAMC,cAAND,EAEFE,EAAe,CACnBC,UAAW,SAAAC,GAAM,kCAAUA,GAAV,IAAmBC,MAAO,QAG7C,OACE,eAAC,OAAD,CAAMC,WAAW,SAASC,eAAe,SAASC,GAAG,OAArD,UACE,eAAC,OAAD,CAAMF,WAAW,SAASG,cAAe,CAAC,SAAU,KAAM,MAAO,MAAjE,UACC,eAAC,OAAD,CAAMC,SAAS,OAAOC,MAAI,EAACC,GAAG,OAAOC,MAAM,aAA3C,UACGb,EAAE,aADL,OAGA,cAAC,IAAD,CAAQI,OAAQF,EAAcY,MAAOpB,EAAgBqB,SAAUpB,EAAsBG,QAASA,OAG/F,eAAC,OAAD,CAAMkB,GAAG,OAAOT,eAAe,SAASD,WAAW,SAAnD,UACE,cAAC,SAAD,CAAQW,MAAM,KAAKC,QAAStB,EAAQmB,SAAUlB,IAC9C,eAAC,OAAD,CAAMmB,GAAG,MAAT,UAAgBhB,EAAE,QAAlB,UAGF,cAAC,OAAD,CAAMgB,GAAG,OAAOT,eAAe,SAASD,WAAW,SAAnD,SACE,cAAC,SAAD,CAAQa,QAASpB,EAAjB,SACEC,EAAE,mBChBGoB,EAfSC,UAAOC,IAAV,oQAOjB,qBAAGC,MAAkBC,aAAaC,MAIlC,qBAAGF,MAAkBC,aAAaE,M,kCCchCC,EAAgBN,UAAOC,IAAV,4CAGbM,EAAYP,UAAOC,IAAV,2IACO,qBAAGC,MAAkBM,OAAOC,cAM5CC,EAAyD,SAAC,GAAgB,IAAD,EAAbC,EAAa,EAAbA,OAAa,EACzBC,KAAKC,MAAMF,GAAvDG,EADqE,EACrEA,OAAQC,EAD6D,EAC7DA,MAAOC,EADsD,EACtDA,SAAUC,EAD4C,EAC5CA,QAASC,EADmC,EACnCA,MAElCvC,EAAMC,cAAND,EAIFwC,EAFcC,cAAZC,UAEoBN,EAEtBO,EAAcC,YAAWT,EAAQG,GATsC,EAW3CO,oBAAUF,IAAiBA,EAAYG,OAASH,EAAYI,SAXjB,mBAWtEC,EAXsE,KAW3DC,EAX2D,KAavEC,EAAWC,cAEjBC,qBAAU,WACHT,IAAiBA,EAAYG,MAASH,EAAYI,UAErDG,EAASG,YAAkBlB,EAAQG,EAAT,OAAkBK,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAaW,MACzDC,MAAK,WAEHN,GAAa,QAGhB,CAACC,EAAUP,EAAaR,EAAQG,EAASW,IAE5C,IAIMO,EAASC,cAEPC,EAAaF,EAAbE,SAEFC,EAAYC,cAEZC,EAAkBxB,IAAayB,WAAWJ,EAAWF,EAAOnB,GAE5D0B,EAAmB1B,IAAayB,WAAWE,qBAAaL,EAAUM,MAAK,SAACC,GAAD,OAAWA,EAAMC,UAAY9B,KAAU+B,OAE9GC,EAAchC,IAAayB,WAAWQ,YAAiB/B,EAAO,IAAM+B,YAAiB/B,EAAOoB,EAAUM,MAAK,SAACC,GAAD,OAAWA,EAAMC,UAAY9B,KAAUkC,UAElJC,EAAcH,EAAcR,EAE5BY,EAAcC,KAAKC,MAAoB,IAAdH,GAAsB,EAErD,OAAS,cAAC7C,EAAD,UACP,eAAC,OAAD,CAAMiD,UAAQ,EAAd,UACG5B,EAAc,cAAC6B,EAAA,EAAD,IAAc,cAACjD,EAAD,CAAWT,QAtBpB,WACtB2D,IAAQC,KAAR,qBAA2B5C,EAA3B,YAAqCG,KAqBN,SAC3B,cAAC0C,EAAA,EAAD,CAAwBlC,KAAI,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAaG,SAG7C,cAAC,WAAD,UACE,eAAC,OAAD,CAAMrC,cAAc,SAApB,UACE,eAAC,OAAD,CAAMI,MAAM,aAAaH,SAAS,OAAOC,MAAI,EAACH,GAAG,OAAjD,iBACEmC,QADF,IACEA,GADF,UACEA,EAAaG,YADf,aACE,EAAmBmC,KAAMzC,GAAW,cAAC,MAAD,CAAKxB,GAAG,OAAR,SAAgBhB,EAAE,cAExD,cAAC,OAAD,CAAMa,MAAM,aAAaH,SAAS,OAAOC,MAAI,EAA7C,mBACK0D,EADL,YACoBN,EADpB,mBAC0CS,EAAYU,QAAQT,EAAc,EAAI,GADhF,mBAYKU,EAFSC,IAAMC,KAAKtD,GAAwB,SAACuD,EAAMC,GAAP,OAAgBD,EAAKtD,SAAWuD,EAAKvD,UCnEjFwD,EA1BgD,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,gBACnEC,EAAQF,EAAOA,EAAKG,KAAI,SAACC,GAC7B,IAAM9D,EAAS,CACbG,OAAQsD,EAERrD,MAAO0D,EAAI1D,MAEXC,SAAUyD,EAAIzD,SAEdC,QAASwD,EAAIxD,QAEbC,MAAOuD,EAAIvD,OAGb,OACC,8BACE,cAAC,EAAD,CAAiBP,OAAQC,KAAK8D,UAAU/D,GAASgE,QAASL,KADlDF,MAIN,CAAC,kDAER,OAAO,cAAC,EAAD,UACEG,KCnBPK,EAAe5E,UAAOC,IAAV,8GACW,qBAAGC,MAAkBM,OAAOqE,cAInDC,EAAmB9E,UAAOC,IAAV,4SASlB,qBAAGC,MAAkBC,aAAaC,MAiHvB2E,EA1GgB,WAAO,IAC5BpG,EAAMC,cAAND,EAEF2D,EAAYC,cAEZ9D,EAAU,CAAC,CACfuG,MAAO,MAEPvF,MAAO,KAET,CACEuF,MAAOrC,qBAEPlD,MAAOgD,aACNwC,OAAO3C,EAAUkC,KAAI,SAAC3B,GAEtB,MAAO,CACLmC,MAAOnC,EAAME,OAEbtD,MAAQoD,EAAMC,aAIbjB,EAAWC,cAEXoD,EAAkBC,cAyBxB,IAAMC,EAAaC,YAAcH,EAAgBI,SAlDd,EAoDD9D,oBAAU4D,IAAeA,EAAWG,QApDnC,mBAoD5B5D,EApD4B,KAoDjBC,EApDiB,KAsDnC,SAAS0C,IAEPY,EAAgBI,SAAW,EAE3B1D,GAAa,GAGfG,qBAAU,WACDqD,IAAgBA,EAAWG,QAAWH,EAAW1D,WAEpB,MAA7BwD,EAAgBlE,SAEjBa,EAAS2D,YAAeN,EAAgBd,IAAKc,EAAgBI,QAASJ,EAAgBO,KAAMP,EAAgBQ,SAAUR,EAAgBS,OACtIzD,MAAK,WAEHN,GAAa,MAMfC,EAAS+D,YAAuBV,EAAgBd,IAAKc,EAAgBI,QAASJ,EAAgBlE,SAAUkE,EAAgBO,KAAMP,EAAgBQ,SAAUR,EAAgBS,OACvKzD,MAAK,WAEHN,GAAa,SAInB,CAACC,EAAUuD,EAAYF,EAAiBtD,IAO7C,OACE,eAACiE,EAAA,EAAD,WACE,cAACjB,EAAD,UACE,cAAC,UAAD,CAASkB,GAAG,KAAKlG,MAAM,MAAMJ,MAAM,YAAYL,GAAG,OAAlD,SACGR,EAAE,gBAIP,cAACmG,EAAD,UACE,cAAC,EAAD,CAAgBpG,UAvDtB,WAEEmD,EAASkE,eAETnE,GAAa,IAmD6BrD,OAAQ2G,EAAgBS,KAAMnH,iBA9D1E,WAEEqD,EAASmE,aAAqBd,EAAgBS,OAE9C/D,GAAa,IA0D+FvD,eAAgB6G,EAAgBe,iBAAkB3H,qBAvEhK,SAA8B4H,GACzBA,IAAahB,EAAgBe,mBAE9BpE,EAASsE,YAAgCD,IAExCtE,GAAa,KAkE0LnD,QAASA,MAb1MkD,EAAY,cAAC6B,EAAA,EAAD,IAAa,cAAC,EAAD,CAAoBc,gBAAiBA,EAAiBF,IAAKc,EAAgBd,IAAKC,KAAI,OAAEe,QAAF,IAAEA,OAAF,EAAEA,EAAYG,OAAOlB,WC7GhI+B,EARqB,WAChC,OACC,mCACE,cAAC,EAAD,OCGQC,UANsB,WACjC,OACE,cAAC,EAAD","file":"static/js/7.1ba47388.chunk.js","sourcesContent":["import React from 'react'\nimport Select from 'react-select'\nimport {\n  Text,\n  Flex,\n  Toggle,\n  Button\n} from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst NftSellPageTab = ({ selectPayToken, handlePayTokenChange, isDesc, handleDescChange, options, onRefresh }) => {\n  const { t } = useTranslation()\n\n  const selectStyles = {\n    container: styles => ({ ...styles,  width: 100 })\n  }\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"10px\">\n      <Flex alignItems=\"center\" flexDirection={['column', null, 'row', null]}>\n       <Text fontSize=\"16px\" bold mr='12px' color=\"textSubtle\">\n         {t('Pay Token')}: \n       </Text>\n       <Select styles={selectStyles} value={selectPayToken} onChange={handlePayTokenChange} options={options}/>\n      </Flex>\n\n      <Flex ml='20px' justifyContent=\"center\" alignItems=\"center\">\n        <Toggle scale=\"sm\" checked={isDesc} onChange={handleDescChange} />\n        <Text ml=\"8px\">{t('Desc')}?</Text>\n      </Flex>\n\n      <Flex ml='20px' justifyContent=\"center\" alignItems=\"center\">\n        <Button onClick={onRefresh}>\n         {t('Refresh')}\n        </Button>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default NftSellPageTab\n","import styled from 'styled-components'\n\nconst NftSellPageGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n   grid-template-columns: repeat(2, 1fr);\n }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n   grid-template-columns: repeat(3, 1fr);\n  }\n`\nexport default NftSellPageGrid\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { getNftPayTokens } from 'sdk/nft/shop'\nimport { getETHId, ADDRESS0 } from 'sdk'\nimport {\n  Card,\n  CardBody,\n  Text,\n  Flex,\n  Tag\n} from 'uikit'\nimport Loader from 'components/Loader'\nimport { useActiveWeb3React } from 'hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchNftMetaAsync } from 'state/actions'\nimport { useNftMeta, useGetApiPrices } from 'state/hooks'\nimport NftMediaPreviewElement from '../NftPreview/NftMediaPreviewElement'\nimport history from '../../routerHistory'\n\nexport interface NftSellPageCardProps {\n  params: string\n\n  refresh?: () => void\n}\n\nconst RootContainer = styled.div`\n  width: 100%;\n`\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\nconst NftSellPageCardElement: React.FC<NftSellPageCardProps> = ({ params }) => {\n  const { nftKey, owner, paytoken, tokenid, price } = JSON.parse(params)\n\n  const { t } = useTranslation()\n\n  const { account } = useActiveWeb3React()\n\n  const isOwner = account === owner\n\n  const nftModeMeta = useNftMeta(nftKey, tokenid)\n\n  const [isloading, setIsLoading] = useState(!nftModeMeta || (!nftModeMeta.meta && !nftModeMeta.loading))\n\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    if (!nftModeMeta || (!nftModeMeta.meta && !nftModeMeta.loading))\n    {  \n      dispatch(fetchNftMetaAsync(nftKey, tokenid, nftModeMeta?.uri))\n     .then(()=>\n      {\n        setIsLoading(false)\n      })\n    }\n  }, [dispatch, nftModeMeta, nftKey, tokenid, setIsLoading])\n\n  const handleNftonSell = () => {\n    history.push(`/nftonsell/${nftKey}/${tokenid}`)\n  }\n\n  const prices = useGetApiPrices()\n\n  const { ethPrice } = prices\n\n  const paytokens = getNftPayTokens()\n\n  const priceTokenPrice = paytoken === ADDRESS0 ? ethPrice : prices[paytoken]\n\n  const priceTokenSymbol = paytoken === ADDRESS0 ? getETHId() : paytokens.find((token) => token.address === paytoken).symbol\n\n  const priceNumber = paytoken === ADDRESS0 ? getBalanceNumber(price, 18) : getBalanceNumber(price, paytokens.find((token) => token.address === paytoken).decimals)\n\n  const priceDollar = priceNumber * priceTokenPrice\n\n  const isHighValue = Math.round(priceDollar * 1000) < 1\n\n  return ( <RootContainer>\n    <Card isActive>\n      {isloading ? ( <Loader/>) : (<Container onClick={handleNftonSell}>\n        <NftMediaPreviewElement meta={nftModeMeta?.meta}/> \n      </Container>) }\n\n      <CardBody>\n        <Flex flexDirection=\"column\">\n          <Text color=\"textSubtle\" fontSize=\"16px\" bold mb='10px'>\n           {nftModeMeta?.meta?.name}{isOwner && <Tag ml='10px'>{t('Owner')}</Tag>}\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold>\n           {`${priceNumber} ${priceTokenSymbol} ≈ ${priceDollar.toFixed(isHighValue ? 4 : 2)} $`}\n          </Text>\n        </Flex>\n      </CardBody>\n    </Card>\n    </RootContainer>\n  )\n}\n\nconst NftSellPageCard = React.memo(NftSellPageCardElement, (prev, next) => prev.params === next.params);\n\nexport default NftSellPageCard\n","import React from 'react'\r\nimport { nftOnSellNode } from 'state/types'\r\nimport NftSellPageGrid from './NftSellPageGrid'\r\nimport NftSellPageCard from './NftSellPageCard'\r\n\r\ninterface NftSellPageContentProps {\r\n    nft: string,\r\n    asks: nftOnSellNode[],\r\n    onCommitSuccess: () => void\r\n}\r\n\r\nconst NftSellPageContent : React.FC<NftSellPageContentProps> = ({ nft, asks, onCommitSuccess }) => {\r\n    const cards = asks ? asks.map((ask) => {  \r\n      const params = {\r\n        nftKey: nft, \r\n        \r\n        owner: ask.owner, \r\n        \r\n        paytoken: ask.paytoken, \r\n        \r\n        tokenid: ask.tokenid, \r\n        \r\n        price: ask.price,\r\n      }\r\n\r\n      return (\r\n       <div key={nft}>\r\n         <NftSellPageCard params={JSON.stringify(params)} refresh={onCommitSuccess}/>\r\n      </div>\r\n      )\r\n     })  : [<>not found</>]\r\n\r\n    return <NftSellPageGrid>  \r\n            {cards} \r\n           </NftSellPageGrid> \r\n}\r\n\r\nexport default NftSellPageContent","import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport { getETHId, ADDRESS0 } from 'sdk'\r\nimport { getNftPayTokens } from 'sdk/nft/shop'\r\nimport { Heading } from 'uikit'\r\nimport Loader from 'components/Loader'\r\nimport { useAppDispatch } from 'state'\r\nimport { useNftOnsells, useNftOnsellPageQC } from 'state/hooks'\r\nimport { setOnSellPageQCVersion, setOnSellPageQCSelectedPayToken, setOnSellPageQCDesc, fetchAsksAsync, fetchPayTokenAsksAsync } from 'state/actions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport Page from 'components/layout/Page'\r\nimport NftSellPageTab from './NftSellPageTab'\r\nimport NftSellPageContent from './NftSellPageContent'               \r\n\r\nconst StyledHeader = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 12px;\r\n  padding-bottom: 22px;\r\n`\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin-bottom: 20px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 20px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\nconst NftSellPage : React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  const paytokens = getNftPayTokens()\r\n\r\n  const options = [{\r\n    label: 'All',\r\n\r\n    value: '*',\r\n  },\r\n  {\r\n    label: getETHId(),\r\n\r\n    value: ADDRESS0,\r\n  }].concat(paytokens.map((token) =>\r\n  {\r\n     return {\r\n       label: token.symbol,\r\n\r\n       value:  token.address\r\n     }\r\n  }))\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const queryConditions = useNftOnsellPageQC()\r\n\r\n  function handlePayTokenChange(selected) {\r\n    if(selected !== queryConditions.selectedPayToken)\r\n    {\r\n      dispatch(setOnSellPageQCSelectedPayToken(selected))\r\n\r\n       setIsLoading(true)\r\n    }\r\n  }\r\n\r\n  function handleDescChange()\r\n  {\r\n    dispatch(setOnSellPageQCDesc(!queryConditions.desc))\r\n\r\n    setIsLoading(true)\r\n  }\r\n\r\n  function onRefresh()\r\n  {\r\n    dispatch(setOnSellPageQCVersion())\r\n\r\n    setIsLoading(true)\r\n  }\r\n\r\n  const pageModule = useNftOnsells(queryConditions.version)\r\n\r\n  const [isloading, setIsLoading] = useState(!pageModule || !pageModule.module)\r\n\r\n  function onCommitSuccess()\r\n  {\r\n    queryConditions.version += 2\r\n\r\n    setIsLoading(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n      if (!pageModule || (!pageModule.module && !pageModule.loading))\r\n      {  \r\n        if(queryConditions.paytoken === '*')\r\n        {  \r\n          dispatch(fetchAsksAsync(queryConditions.nft, queryConditions.version, queryConditions.page, queryConditions.pagesize, queryConditions.desc))\r\n         .then(()=>\r\n          {\r\n            setIsLoading(false)\r\n          })\r\n        }\r\n\r\n        else \r\n        {\r\n          dispatch(fetchPayTokenAsksAsync(queryConditions.nft, queryConditions.version, queryConditions.paytoken, queryConditions.page, queryConditions.pagesize, queryConditions.desc))\r\n          .then(()=>\r\n           {\r\n             setIsLoading(false)\r\n           })        \r\n        }\r\n     }\r\n    }, [dispatch, pageModule, queryConditions, setIsLoading])\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    return ( isloading ? <Loader /> : <NftSellPageContent onCommitSuccess={onCommitSuccess} nft={queryConditions.nft} asks={pageModule?.module.asks}/>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Page>\r\n      <StyledHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('NFT Sell')}\r\n        </Heading>\r\n      </StyledHeader>\r\n      \r\n      <ControlContainer>\r\n        <NftSellPageTab onRefresh={onRefresh} isDesc={queryConditions.desc} handleDescChange={handleDescChange} selectPayToken={queryConditions.selectedPayToken} handlePayTokenChange={handlePayTokenChange} options={options}/>\r\n      </ControlContainer>\r\n\r\n      {renderContent()}\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default NftSellPage","import React from 'react'\r\nimport NftSellPage from './NftSellPage'\r\n\r\nconst NftSellPageagent : React.FC = () => {\r\n    return (\r\n     <>\r\n       <NftSellPage />\r\n     </>\r\n    );\r\n}\r\n\r\nexport default NftSellPageagent","import React from 'react'\r\nimport NftSellPageagent from './NftSellPageagent'\r\n\r\nconst NftSellPagewrapper: React.FC = () => {\r\n    return (\r\n      <NftSellPageagent />\r\n    );\r\n}\r\n\r\nexport default NftSellPagewrapper"],"sourceRoot":""}