{"version":3,"sources":["utils/compoundApyHelpers.ts","utils/apr.ts","components/ApyCalculatorModal/index.tsx","utils/latinise.ts","components/Select/Select.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Liquiditypools/components/Liquiditypoolcard/DetailsSection.tsx","views/Liquiditypools/components/Liquiditypoolcard/CardHeading.tsx","hooks/useLiquidityApprove.ts","hooks/useLiquidityStake.ts","hooks/useLiquidityUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/ModalInput/ModalInput.tsx","views/Liquiditypools/components/DepositModal.tsx","views/Liquiditypools/components/WithdrawModal.tsx","views/Liquiditypools/components/Liquiditypoolcard/StakeAction.tsx","hooks/useLiquidityHarvest.ts","views/Liquiditypools/components/Liquiditypoolcard/HarvestAction.tsx","views/Liquiditypools/components/types.ts","views/Liquiditypools/components/Liquiditypoolcard/LiquidityPoolCardActions.tsx","views/Liquiditypools/components/Liquiditypoolcard/ApyButton.tsx","views/Liquiditypools/components/Liquiditypoolcard/Liquiditypoolcard.tsx","hooks/useDelayedUnmount.ts","views/Liquiditypools/components/Liquiditypooltable/Apr.tsx","views/Liquiditypools/components/Liquiditypooltable/Farm.tsx","views/Liquiditypools/components/Liquiditypooltable/Earned.tsx","views/Liquiditypools/components/Liquiditypooltable/Details.tsx","views/Liquiditypools/components/Liquiditypooltable/Liquidity.tsx","views/Liquiditypools/components/Liquiditypooltable/Actions/styles.ts","views/Liquiditypools/components/Liquiditypooltable/Actions/HarvestAction.tsx","views/Liquiditypools/components/Liquiditypooltable/Actions/StakedAction.tsx","views/Liquiditypools/components/Liquiditypooltable/Actions/ActionPanel.tsx","views/Liquiditypools/components/Liquiditypooltable/CellLayout.tsx","views/Liquiditypools/components/Liquiditypooltable/Row.tsx","views/Liquiditypools/components/Liquiditypooltable/FarmTable.tsx","views/Liquiditypools/LiquiditypoolTab.tsx","views/Liquiditypools/components/SearchInput.tsx","views/Liquiditypools/components/ToggleView.tsx","views/Liquiditypools/Liquiditypools.tsx","views/Liquiditypools/Liquiditypoolsagent.tsx","views/Liquiditypools/Liquiditypoolswrapper.tsx"],"names":["tokenEarnedPerThousandDollarsCompounding","numberOfDays","farmApr","tokenPrice","roundingDecimals","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","daysAsDecimalOfYear","principal","finalAmount","parseFloat","toFixed","getRoi","amountEarned","amountInvested","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","BigNumber","times","BLOCKS_PER_YEAR","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolLiquidityUsd","Grid","styled","GridItem","ApyCalculatorModal","onDismiss","earnTokenPrice","linkLabel","linkHref","earningTokenSymbol","t","useTranslation","oneThousandDollarsWorthOfToken","tokenEarnedPerThousand1D","tokenEarnedPerThousand7D","tokenEarnedPerThousand30D","tokenEarnedPerThousand365D","title","fontSize","bold","color","textTransform","mb","maxWidth","freq","toLocaleString","mt","fee","justifyContent","href","Latinise","latin_map","τ","Τ","latinise","input","replace","x","DropDownHeader","theme","shadows","inset","colors","inputSecondary","DropDownListContainer","zIndices","dropdown","mediaQueries","sm","DropDownContainer","width","props","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","onChange","containerRef","useRef","dropdownRef","useState","setIsOpen","selectedOption","setSelectedOption","height","containerSize","setContainerSize","toggling","onOptionClicked","option","useEffect","current","offsetWidth","offsetHeight","ref","onClick","label","map","Wrapper","primary","ExpandableSectionButton","expanded","aria-label","role","defaultProps","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wethAddressString","getWETH","address","ethSymbol","getETH","symbol","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","removed","totalValueFormatted","lpLabel","addLiquidityUrl","liquidity","currentBlock","useBlock","startBlock","endBlock","shouldShowBlockCountdown","blocksUntilStart","Math","max","blocksRemaining","hasPoolStarted","alignItems","small","Balance","value","decimals","ml","name","Flex","CardHeading","isCommunityFarm","flexDirection","split","useLiquidityApprove","liquidityId","callback","account","useActiveWeb3React","dispatch","useAppDispatch","liquidityPoolContract","getLiquidityPoolContractAddress","liquidityContract","useTokenContract","inputs","useMemo","allowance","useSingleCallResult","result","toString","undefined","currentallowance","approvalState","gt","ApprovalState","APPROVED","NOT_APPROVED","UNKNOWN","approve","useCallback","a","console","error","estimateGas","MaxUint256","estimatedGas","gasLimit","calculateGasMargin","then","interval","setInterval","updateFarmUserAllowance","clearInterval","catch","useLiquidityStake","useLiquidityPoolContract","amount","deposit","BIG_TEN","pow","updateUserDataAsync","useLiquidityUnstake","enableEmergencyWithdraw","onUnstake","emergencyWithdraw","estimatedGas_em","withdraw","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","child","i","StyledTokenInput","isWarning","warning","text","StyledInput","Input","xs","StyledErrorMessage","Text","ModalInput","onSelectMax","inputTitle","isBalanceZero","style","position","pl","balance","balanceNumber","Number","maximumFractionDigits","displayBalance","pattern","inputMode","step","min","placeholder","scale","mr","external","DepositModal","onConfirm","tokenName","setCallback","val","setVal","pendingTx","setPendingTx","fullBalance","getFullDisplayBalance","valNumber","fullBalanceNumber","toastSuccess","useToast","handleChange","e","currentTarget","validity","valid","handleSelectMax","variant","disabled","eq","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakeCallbackHander","unstakeCallbackHander","stakedBalance","tokenBalance","liquidityid","onStake","location","useLocation","stakedBalanceNumber","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","some","item","pathname","includes","useLiquidityHarvest","getReward","ViewMode","HarvestAction","earnings","earningToken","onReward","rawEarningsBalance","Action","LiquidityPoolCardActions","requestedApproval","setRequestedApproval","userData","allowanceAsString","tokenBalanceAsString","stakedBalanceAsString","earningsAsString","lpName","toUpperCase","isApproved","isGreaterThan","toastError","approveState","onApprove","handleApprove","pr","UnlockButton","ApyButton","onPresentApyModal","event","stopPropagation","FCard","card","background","radii","Divider","borderColor","ExpandingWrapper","Liquiditypoolcard","showExpandableSection","setShowExpandableSection","liquidityvalue","earnLabel","farmAPR","liquidityUrlPathParts","quoteToken","token","isCommunity","display","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","Farm","useFarmUser","rawStakedBalance","Amount","span","earned","textDisabled","Earned","userDataReady","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","ReferenceElement","LiquidityWrapper","lg","Liquidity","displayLiquidity","useTooltip","placement","tooltipOffset","targetRef","tooltipVisible","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","isZero","useCountUp","start","end","duration","separator","countUp","update","updateValue","marginBottom","marginTop","expandAnimation","keyframes","collapseAnimation","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","farm","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","hasStakedAmount","actionPanelExpanded","setActionPanelExpanded","shouldRenderChild","toggleActionPanel","isXs","tableSchema","columnNames","column","Object","keys","key","columnIndex","indexOf","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","row","original","scrollIntoView","behavior","LiquiditypoolTab","showHistory","setShowHistory","hasStakeInFinishedFarms","activeIndex","onItemClick","index","show","InputWrapper","SearchInput","onChangeCallback","setToggled","searchText","setSearchText","debouncedOnChange","debounce","target","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","Liquiditypools","useLiquidityPools","farmsLP","userDataLoaded","query","setQuery","usePersistState","setViewMode","stakedOnly","setStakedOnly","sortOption","setSortOption","prices","useGetApiPrices","fastRefresh","useRefresh","fetchFarmUserDataAsync","fetchFarmsPublicDataAsync","inactiveFarms","filter","activeFarms","stakedOnlyFarms","stakedInactiveFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","rewardPerBlock","lowercaseQuery","toLowerCase","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","farmsStakedMemoized","farmsStaked","farms","orderBy","sortFarms","slice","IntersectionObserver","entries","isIntersecting","farmsCurrentlyVisible","rootMargin","threshold","observe","rowData","image","toLocaleLowerCase","FarmsPageHeader","as","Page","checked","marginLeft","sort","b","renderContent","Liquiditypoolsagent","useFetchPublicData","Liquiditypoolwrapper","RefreshContext"],"mappings":"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","file":"static/js/5.0cecc55f.chunk.js","sourcesContent":["export const tokenEarnedPerThousandDollarsCompounding = ({\n  numberOfDays,\n  farmApr,\n  tokenPrice,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  let aprAsDecimal = farmApr / 100\n\n  if (performanceFee) {\n    // Reduce the APR by the % performance fee\n    const feeRelativeToApr = (farmApr / 100) * performanceFee\n\n    const aprAfterFee = farmApr - feeRelativeToApr\n    \n    aprAsDecimal = aprAfterFee / 100\n  }\n\n  const daysAsDecimalOfYear = numberOfDays / 365\n  // Calculate the starting TOKEN balance with a dollar balance of $1000.\n  const principal = 1000 / tokenPrice\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n  // To get the TOKEN amount earned, deduct the amount after compounding (finalAmount) from the starting TOKEN balance (principal)\n  const interestEarned = finalAmount - principal\n\n  return parseFloat(interestEarned.toFixed(roundingDecimals))\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n\n  return percentage\n}\n","import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR } from 'sdk'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @returns\n */\nexport const getFarmApr = (rewardTokenPrice: number, poolLiquidityUsd: BigNumber, tokenPerBlock: number): number => {\n  const yearlyRewardAllocation = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n\n  const apr = yearlyRewardAllocation.div(poolLiquidityUsd).times(100)\n  \n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\nexport default null\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex, Box } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { tokenEarnedPerThousandDollarsCompounding, getRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  earnTokenPrice: number\n  apr: number\n  linkLabel: string\n  linkHref: string\n  earningTokenSymbol?: string\n  roundingDecimals?: number\n  compoundFrequency?: number\n  performanceFee?: number\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  earnTokenPrice,\n  apr,\n  linkLabel,\n  linkHref,\n  earningTokenSymbol,\n  roundingDecimals = 2,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}) => {\n  const { t } = useTranslation()\n  const oneThousandDollarsWorthOfToken = 1000 / earnTokenPrice\n\n  const tokenEarnedPerThousand1D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 1,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand7D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 7,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand30D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 30,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n  const tokenEarnedPerThousand365D = tokenEarnedPerThousandDollarsCompounding({\n    numberOfDays: 365,\n    farmApr: apr,\n    tokenPrice : earnTokenPrice,\n    roundingDecimals,\n    compoundFrequency,\n    performanceFee,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {t('ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {earningTokenSymbol} {t('per')} $1000\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({ amountEarned: tokenEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfToken }).toFixed(\n              roundingDecimals,\n            )}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand30D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {getRoi({\n              amountEarned: tokenEarnedPerThousand365D,\n              amountInvested: oneThousandDollarsWorthOfToken,\n            }).toFixed(roundingDecimals)}\n            %\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{tokenEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Box mb=\"28px\" maxWidth=\"280px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            `Calculated based on current rates. Compounding %freq%x daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.`,\n            { freq: compoundFrequency.toLocaleString() },\n          )}\n        </Text>\n        {performanceFee > 0 && (\n          <Text mt=\"14px\" fontSize=\"12px\" color=\"textSubtle\">\n            {t(`All estimated rates take into account this pool's %fee%% performance fee`, { fee: performanceFee })}\n          </Text>\n        )}\n      </Box>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={linkHref}>{linkLabel}</LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","export const Latinise = {\n  latin_map: {\n    τ: 't',\n    Τ: 'T',\n  },\n}\n\nexport const latinise = (input: string) => {\n  return input.replace(/[^A-Za-z0-9[\\] ]/g, (x) => Latinise.latin_map[x] || x)\n}\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from 'uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import { getWETH, getETH } from 'sdk'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const wethAddressString = getWETH()?.address\n\n  const ethSymbol = getETH()?.symbol\n\n  const quoteTokenAddressString: string = quoteTokenAddress \n\n  const tokenAddressString: string = tokenAddress \n\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wethAddressString ? ethSymbol : quoteTokenAddressString\n \n  const secondPart = !tokenAddressString || tokenAddressString === wethAddressString ? ethSymbol : tokenAddressString\n \n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal, TimerIcon, Skeleton } from 'uikit'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { LiquidityPoolWithStakedValue } from './types'\n\nexport interface ExpandableSectionProps {\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n  liquidity : LiquidityPoolWithStakedValue\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n  liquidity\n}) => {\n  const { t } = useTranslation()\n\n  const { currentBlock } = useBlock()\n\n  const { startBlock, endBlock } = liquidity\n\n  const shouldShowBlockCountdown = (startBlock > 0)\n\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {shouldShowBlockCountdown && (\n        <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>{t(\"getLP\", { name: lpLabel })}</StyledLinkExternal>\n      )}\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, Heading } from 'uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  isCommunityFarm?: boolean\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  isCommunityFarm,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useCallback, useMemo } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { MaxUint256 } from '@ethersproject/constants'\nimport { useActiveWeb3React } from 'hooks'\nimport {  Liquidity } from 'sdk'\nimport { getLiquidityPoolContractAddress } from 'utils/addressHelpers'\nimport { useAppDispatch } from 'state'\nimport { updateFarmUserAllowance } from 'state/actions'\nimport { calculateGasMargin } from '../utils'\nimport { ApprovalState } from './useApproveCallback'\nimport { useTokenContract } from './useContract'\nimport { useSingleCallResult } from '../state/multicall/hooks'\n\nexport default function useLiquidityApprove(\n  liquidity: Liquidity, liquidityId, callback: any\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n  \n  const liquidityPoolContract = getLiquidityPoolContractAddress(liquidityId)\n\n  const liquidityContract = useTokenContract(liquidity.address)\n\n  const inputs = useMemo(() => [account, liquidityPoolContract], [account, liquidityPoolContract])\n\n  const allowance = useSingleCallResult(liquidityContract, 'allowance', inputs).result\n\n  const [ currentallowance ] = useMemo(() => [allowance ? new BigNumber(allowance.toString()) : undefined], [allowance])\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!liquidity || !liquidityPoolContract) return ApprovalState.UNKNOWN\n\n    if (!currentallowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentallowance.gt(0) ? ApprovalState.APPROVED : ApprovalState.NOT_APPROVED\n  }, [liquidity, liquidityPoolContract, currentallowance])\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n\n      return\n    }\n\n    if (!liquidityContract) {\n      console.error('liquidityContract is null')\n\n      return\n    }\n\n    if (!liquidityPoolContract) {\n      console.error('no spender')\n\n      return\n    }\n\n    const estimatedGas = await liquidityContract.estimateGas.approve(liquidityPoolContract, MaxUint256)\n\n    // eslint-disable-next-line consistent-return\n    liquidityContract\n           .approve(liquidityPoolContract, MaxUint256, { gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n            const interval = setInterval(async () => {\n              dispatch(updateFarmUserAllowance(liquidityId, account)).then(\n                () =>\n                {\n                 clearInterval(interval)   \n\n                 callback()     \n                }\n               )\n            }, 6000)\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, liquidityContract, liquidityPoolContract, liquidityId, dispatch, account, callback])\n\n  return [approvalState, approve]\n}\n\n \n \n","import { BIG_TEN } from 'sdk'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useActiveWeb3React } from 'hooks'\nimport { updateUserDataAsync } from 'state/actions'\nimport { useLiquidityPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useLiquidityStake(\n  liquidityId, callback: any\n): [ (amount: string, decimals: number) => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const liquidityPoolContract = useLiquidityPoolContract(liquidityId)\n  \n  const onStake = useCallback(async (amount: string, decimals = 18): Promise<void> => {\n    if (!liquidityPoolContract) {\n      console.error('liquidity pool contract is null')\n\n      return\n    }\n\n    const estimatedGas = await liquidityPoolContract.estimateGas.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n                                                      \n    // eslint-disable-next-line consistent-return\n    liquidityPoolContract\n           .deposit((new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()), { gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n \n            const interval = setInterval(async () => {\n              dispatch(updateUserDataAsync(liquidityId, account)).then(\n                () =>\n                {\n                 clearInterval(interval)   \n\n                 callback()     \n                }\n               )\n            }, 6000)\n      })\n      .catch((error: Error) => {\n        console.error('Failed to stake token', error)\n        throw error\n      })\n    \n  }, [liquidityPoolContract, dispatch, liquidityId, account, callback])\n\n  return [ onStake ]\n}","import { useCallback } from 'react'\nimport { useActiveWeb3React } from 'hooks'\nimport { BIG_TEN } from 'sdk'\nimport BigNumber from 'bignumber.js'\nimport { useAppDispatch } from 'state'\nimport { updateUserDataAsync } from 'state/actions'\nimport { useLiquidityPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useLiquidityUnstake(\n  liquidityId, enableEmergencyWithdraw = false, callback: any\n): [ (amount: string, decimals: number) => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const liquidityPoolContract = useLiquidityPoolContract(liquidityId)\n  \n  const onUnstake = useCallback(async (amount: string, decimals = 18): Promise<void> => {\n    if (!liquidityPoolContract) {\n      console.error('liquidity pool contract is null')\n\n      return\n    }\n\n    if (enableEmergencyWithdraw) {\n      const estimatedGas_em = await liquidityPoolContract.estimateGas.emergencyWithdraw()\n                                                      \n      // eslint-disable-next-line consistent-return\n      liquidityPoolContract\n             .emergencyWithdraw({ gasLimit: calculateGasMargin(estimatedGas_em) })\n             .then(() => {\n              const interval = setInterval(async () => {\n                dispatch(updateUserDataAsync(liquidityId, account)).then(\n                  () =>\n                  {\n                   clearInterval(interval)   \n  \n                   callback()     \n                  }\n                 )\n              }, 6000)\n        })\n        .catch((error: Error) => {\n          console.error('Failed to approve token', error)\n          throw error\n        })\n    } \n    else {\n      const estimatedGas = await liquidityPoolContract.estimateGas.withdraw(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString())\n                                                      \n      // eslint-disable-next-line consistent-return\n      liquidityPoolContract\n             .withdraw((new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString()), { gasLimit: calculateGasMargin(estimatedGas) })\n             .then(() => {  \n              const interval = setInterval(async () => {\n                dispatch(updateUserDataAsync(liquidityId, account)).then(\n                  () =>\n                  {\n                   clearInterval(interval)   \n  \n                   callback()     \n                  }\n                 )\n              }, 6000)\n        })\n        .catch((error: Error) => {\n          console.error('Failed to unstake token', error)\n          throw error\n        })\n    }\n    \n  }, [liquidityPoolContract, dispatch, liquidityId, account, callback, enableEmergencyWithdraw])\n\n  return [ onUnstake ]\n}\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const { t } = useTranslation()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = (balance: string) => {\n    if (isBalanceZero) {\n      return '0'\n    }\n    const balanceNumber = Number(balance)\n    if (balanceNumber > 0 && balanceNumber < 0.0001) {\n      return balanceNumber.toLocaleString(undefined, { maximumFractionDigits: 20 })\n    }\n    return balanceNumber.toLocaleString()\n  }\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {t('Balance')}: {displayBalance(max)}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput\n            pattern=\"^[0-9]*[.,]?[0-9]*$\"\n            inputMode=\"decimal\"\n            step=\"any\"\n            min=\"0\"\n            onChange={onChange}\n            placeholder=\"0\"\n            value={value}\n          />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {t('Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          {t(\"No tokens to stake\")}:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {t('get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n\n  onConfirm: (amount: string, decimals: number) => void\n\n  decimals: number\n\n  onDismiss?: () => void\n\n  tokenName?: string\n\n  addLiquidityUrl?: string,\n\n  setCallback: any\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, decimals, onDismiss, tokenName = '', addLiquidityUrl, setCallback }) => {\n  const [val, setVal] = useState('')\n\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const { t } = useTranslation()\n\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const { toastSuccess } = useToast()\n\n  setCallback(()=>\n  {\n    toastSuccess(`${t('Staked')}!`, t(`Your staking funds have been staked in the pool!`))\n\n    setPendingTx(false)\n    \n    onDismiss()\n  })\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, decimals)\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('getLP', { name: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n\n  onConfirm: (amount: string, decimals: number) => void\n\n  decimals: number\n  \n  onDismiss?: () => void\n  \n  tokenName?: string,\n\n  setCallback: any\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, decimals, onDismiss, max, tokenName = '', setCallback }) => {\n  const [val, setVal] = useState('')\n\n  const [pendingTx, setPendingTx] = useState(false)\n  \n  const { t } = useTranslation()\n  \n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const valNumber = new BigNumber(val)\n\n  const fullBalanceNumber = new BigNumber(fullBalance)\n\n  const { toastSuccess } = useToast()\n\n  setCallback(()=>\n  {\n    toastSuccess(\n      `${t('Unstaked')}!`,\n      t(`Your earnings have also been harvested to your wallet!`),\n    )\n\n    setPendingTx(false)\n    \n    onDismiss()\n  })\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      if (e.currentTarget.validity.valid) {\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\n      }\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={t('Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx || !valNumber.isFinite() || valNumber.eq(0) || valNumber.gt(fullBalanceNumber)}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val, decimals)\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React, { useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport useLiquidityStake from 'hooks/useLiquidityStake'\nimport useLiquidityUnstake from 'hooks/useLiquidityUnstake'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface StakeActionsProps {\n  stakedBalance?: BigNumber\n\n  tokenBalance?: BigNumber\n\n  tokenName?: string\n\n  liquidityid?: number\n\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  liquidityid,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  let stakeCallbackHander\n\n  const stakeModalCallbackSetting = ((callback)=>\n  {\n    stakeCallbackHander = callback\n  })\n\n  const stakeCallback = () => \n  {\n    if(stakeCallbackHander)\n    {\n      stakeCallbackHander()\n    }\n  }\n\n  const [ onStake ] = useLiquidityStake(liquidityid, stakeCallback)\n\n  let unstakeCallbackHander\n\n  const unstakeModalCallbackSetting = ((callback)=>\n  {\n    unstakeCallbackHander = callback\n  })\n\n\n  const unstakeCallback = () =>\n  {\n    if(unstakeCallbackHander)\n    {\n      unstakeCallbackHander()\n    }\n  }\n\n  const [ onUnstake ] = useLiquidityUnstake(liquidityid, false, unstakeCallback)\n\n  const location = useLocation()\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    \n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} decimals={18} setCallback={stakeModalCallbackSetting} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} decimals={18} tokenName={tokenName} setCallback={unstakeModalCallbackSetting}/>,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import { useCallback } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useActiveWeb3React } from 'hooks'\nimport { updateUserDataAsync } from 'state/actions'\nimport { useLiquidityPoolContract } from './useContract'\nimport { calculateGasMargin } from '../utils'\n\nexport default function useLiquidityHarvest(\n  liquidityId, callback: any\n): [ () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n\n  const dispatch = useAppDispatch()\n\n  const liquidityPoolContract = useLiquidityPoolContract(liquidityId)\n  \n  const onReward = useCallback(async (): Promise<void> => {\n    if (!liquidityPoolContract) {\n      console.error('liquidity pool contract is null')\n\n      return\n    }\n\n    const estimatedGas = await liquidityPoolContract.estimateGas.getReward()\n                                                      \n    // eslint-disable-next-line consistent-return\n    liquidityPoolContract\n           .getReward({ gasLimit: calculateGasMargin(estimatedGas) })\n           .then(() => {\n            const interval = setInterval(async () => {\n              dispatch(updateUserDataAsync(liquidityId, account)).then(\n                () =>\n                {\n                 clearInterval(interval)   \n\n                 callback()     \n                }\n               )\n            }, 6000)\n      })\n      .catch((error: Error) => {\n        console.error('Failed to harvest token', error)\n        throw error\n      })\n    \n  }, [liquidityPoolContract, liquidityId, dispatch, account, callback])\n\n  return [ onReward ]\n}\n\n \n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'uikit'\nimport { Token } from 'sdk'\nimport { useTranslation } from 'contexts/Localization'\nimport useLiquidityHarvest from 'hooks/useLiquidityHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useActiveWeb3React } from 'hooks'\nimport useToast from 'hooks/useToast'\n\ninterface HarvestActionsProps {\n  earnings?: BigNumber\n\n  earningToken: Token\n\n  liquidityid?: number\n}\n\nconst HarvestAction: React.FC<HarvestActionsProps> = ({ earnings, earningToken, liquidityid }) => {\n  const { account } = useActiveWeb3React()\n\n  const { t } = useTranslation()\n  \n  const [pendingTx, setPendingTx] = useState(false)\n\n  const { toastSuccess } = useToast()\n\n  const harvestCallback = ()=>\n  {\n    toastSuccess(`${t('Harvested')}!`, t(`Your earnings have been sent to your wallet!`))\n\n    setPendingTx(false)\n  }\n  \n  const [ onReward ] = useLiquidityHarvest(liquidityid, harvestCallback)\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings, earningToken.decimals) : 0\n\n  const displayBalance = rawEarningsBalance.toLocaleString()\n    \n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n        }}\n      >\n        {t('Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APR: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Text } from 'uikit'\nimport { LiquidityPool } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport useLiquidityApprove from 'hooks/useLiquidityApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface LiquidityPoolWithStakedValue extends LiquidityPool {\n  apr?: number\n}\n\ninterface LiquidityPoolCardActionsProps {\n  liquidity: LiquidityPoolWithStakedValue\n\n  provider?: ProviderType\n\n  account?: string\n\n  addLiquidityUrl?: string\n}\n\nconst LiquidityPoolCardActions: React.FC<LiquidityPoolCardActionsProps> = ({ liquidity, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const {\n    allowance: allowanceAsString = 0,\n\n    tokenBalance: tokenBalanceAsString = 0,\n\n    stakedBalance: stakedBalanceAsString = 0,\n\n    earnings: earningsAsString = 0,\n\n  } = liquidity.userData || {}\n\n  const allowance = new BigNumber(allowanceAsString)\n\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\n\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\n\n  const earnings = new BigNumber(earningsAsString)\n\n  const lpName = liquidity.liquidity.symbol.toUpperCase() \n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const { toastSuccess, toastError } = useToast()\n\n  const approveCallback = () =>\n  {\n    toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the farm!`)}`)\n       \n    setRequestedApproval(false)\n  }\n\n  const [ approveState, onApprove ] = useLiquidityApprove(liquidity.liquidity, liquidity.liquidityid, approveCallback)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n\n      await onApprove()\n\n      if (approveState ===  ApprovalState.UNKNOWN) {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n\n        setRequestedApproval(false)\n      }  else if (approveState === ApprovalState.APPROVED)\n      {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the farm!`)}`)\n       \n        setRequestedApproval(false)\n      }\n\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, approveState, toastSuccess, toastError, t])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        liquidityid={liquidity.liquidityid}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          {liquidity.earningToken.symbol.toUpperCase()}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} earningToken={liquidity.earningToken} liquidityid={liquidity.liquidityid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default LiquidityPoolCardActions\n","import React from 'react'\nimport { IconButton, useModal, CalculateIcon } from 'uikit'\nimport ApyCalculatorModal from 'components/ApyCalculatorModal'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  earnTokenPrice? : number\n  apr?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, earnTokenPrice, apr, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      linkLabel={`${t('getLP', {name : lpLabel})}`}\n      earnTokenPrice={earnTokenPrice}\n      apr={apr}\n      linkHref={addLiquidityUrl}\n    />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Text, Skeleton } from 'uikit'\nimport { provider as ProviderType } from 'web3-core'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport LiquidityPoolCardActions from './LiquidityPoolCardActions'\nimport ApyButton from './ApyButton'\nimport { LiquidityPoolWithStakedValue } from './types'\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: ${({ theme }) => (theme.radii.card)};\n  box-shadow: 0px 1px 4px rgba(25, 19, 38, 0.15);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface LiquiditypoolcardProps {\n  liquidity: LiquidityPoolWithStakedValue\n  earnTokenPrice?: number\n  removed: boolean\n  provider?: ProviderType\n  account?: string\n}\n\nconst Liquiditypoolcard: React.FC<LiquiditypoolcardProps> = ({ liquidity, earnTokenPrice, removed, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const totalValueFormatted = liquidity.liquidityvalue\n    ? `$${liquidity.liquidityvalue.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = liquidity.liquidity && liquidity.liquidity.symbol.toUpperCase().replace('PANCAKE', '')\n\n  const earnLabel = liquidity.earningToken.symbol\n\n  const farmAPR = liquidity.apr && liquidity.apr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: liquidity.liquidity.quoteToken.address,\n  \n    tokenAddress: liquidity.liquidity.token.address,\n  })\n\n  const addLiquidityUrl = `/#/add/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      <CardHeading\n        lpLabel={lpLabel}\n        isCommunityFarm={liquidity.isCommunity}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{t('APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {liquidity.apr ? (\n              <>\n                <ApyButton lpLabel={lpLabel} earnTokenPrice={earnTokenPrice} addLiquidityUrl={addLiquidityUrl} apr={liquidity.apr} />\n                {farmAPR}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <LiquidityPoolCardActions liquidity={liquidity} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          liquidity={liquidity}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default Liquiditypoolcard\n","import { useState, useEffect } from 'react'\n\n/**\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\n * This hook \"shows\" element immediately when the isMounted is true\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\n * delayTime should be the same as animation time in most cases.\n */\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\n  const [shouldRender, setShouldRender] = useState(false)\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>\n    if (isMounted && !shouldRender) {\n      setShouldRender(true)\n    } else if (!isMounted && shouldRender) {\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\n    }\n    return () => clearTimeout(timeoutId)\n  }, [isMounted, delayTime, shouldRender])\n  return shouldRender\n}\n\nexport default useDelayedUnmount\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport ApyButton from '../Liquiditypoolcard/ApyButton'\n\nexport interface AprProps {\n  value: string\n  lpLabel: string\n  tokenAddress?: string\n  quoteTokenAddress?: string\n  earnTokenPrice?: number\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  earnTokenPrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  \n  const addLiquidityUrl = `/#/add/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} earnTokenPrice={earnTokenPrice} apr={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>\n          <Skeleton width={60} />\n        </AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text } from 'uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  liquidityid: number\n  image: string\n}\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ label, liquidityid }) => {\n  const { stakedBalance } = useFarmUser(liquidityid)\n\n  const { t } = useTranslation()\n  \n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {t('Farming')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton } from 'uikit'\n\nexport interface EarnedProps {\n  earnings: number\n  liquidityid: number\n}\n\ninterface EarnedPropsWithLoading extends EarnedProps {\n  userDataReady: boolean\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedPropsWithLoading> = ({ earnings, userDataReady }) => {\n  if (userDataReady) {\n    return <Amount earned={earnings}>{earnings.toLocaleString()}</Amount>\n  }\n  return (\n    <Amount earned={0}>\n      <Skeleton width={60} />\n    </Amount>\n  )\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { t } = useTranslation()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text, Skeleton, useTooltip } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\n\nconst ReferenceElement = styled.div`\n  display: inline-block;\n`\nexport interface LiquidityProps {\n  liquidityvalue: BigNumber\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n  margin-right: 14px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    text-align: left;\n    margin-right: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidityvalue }) => {\n  const displayLiquidity = liquidityvalue ? (\n    `$${Number(liquidityvalue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n  ) : (\n    <Skeleton width={60} />\n  )\n\n  const { t } = useTranslation()\n  \n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('The total value of the funds in this farm’s liquidity pool'),\n    { placement: 'top-end', tooltipOffset: [20, 10] },\n  )\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <ReferenceElement ref={targetRef}>\n        <HelpIcon color=\"textSubtle\" />\n      </ReferenceElement>\n      {tooltipVisible && tooltip}\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { Button, Skeleton } from 'uikit'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useLiquidityHarvest from 'hooks/useLiquidityHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCountUp } from 'react-countup'\nimport useToast from 'hooks/useToast'\nimport { LiquidityPoolWithStakedValue } from '../../Liquiditypoolcard/types'\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\ninterface HarvestActionProps extends LiquidityPoolWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ liquidityid, earningToken, userData, userDataReady }) => {\n  const earningsBigNumber = new BigNumber(userData.earnings)\n\n  let earnings = 0\n\n  const earningsBusd = 0\n\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceNumber(earningsBigNumber, earningToken.decimals)\n \n    displayBalance = earnings.toLocaleString()\n  }\n\n  const { toastSuccess } = useToast()\n\n  const [pendingTx, setPendingTx] = useState(false)\n\n  const harvestCallback = ()=>\n  {\n    toastSuccess(`${t('Harvested')}!`, t(`Your earnings have been sent to your wallet!`))\n\n    setPendingTx(false)\n  }\n\n  const [ onReward ] = useLiquidityHarvest(liquidityid, harvestCallback)\n\n  const { t } = useTranslation()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>{earningToken.symbol.toUpperCase()} </Title>\n        <Subtle>{t('Earned')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          {countUp > 0 && <Staked>~{countUp}USD</Staked>}\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton } from 'uikit'\nimport { useLocation } from 'react-router-dom'\nimport UnlockButton from 'components/UnlockButton'\nimport { useActiveWeb3React } from 'hooks'\nimport { useFarmUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useLiquidityApprove from 'hooks/useLiquidityApprove'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { ApprovalState } from 'hooks/useApproveCallback'\nimport useLiquidityStake from 'hooks/useLiquidityStake'\nimport useLiquidityUnstake from 'hooks/useLiquidityUnstake'\nimport { LiquidityPoolWithStakedValue } from '../../Liquiditypoolcard/types'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends LiquidityPoolWithStakedValue {\n  userDataReady: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  liquidityid,\n  liquidity,\n  userDataReady,\n}) => {\n  const { t } = useTranslation()\n\n  const { account } = useActiveWeb3React()\n\n  const [requestedApproval, setRequestedApproval] = useState(false)\n\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(liquidityid)\n\n  const { toastSuccess, toastError } = useToast()\n\n  let stakeCallbackHander\n\n  const stakeModalCallbackSetting = ((callback)=>\n  {\n    stakeCallbackHander = callback\n  })\n\n  const stakeCallback = () =>\n  {\n    if(stakeCallbackHander)\n    {\n      stakeCallbackHander()\n    }\n  }\n\n  const [ onStake ] = useLiquidityStake(liquidityid, stakeCallback)\n\n  let unstakeCallbackHander\n\n  const unstakeModalCallbackSetting = ((callback)=>\n  {\n    unstakeCallbackHander = callback\n  })\n\n  const unstakeCallback = () =>\n  {\n     if(unstakeCallbackHander)\n     {\n       unstakeCallbackHander()\n     }\n  }\n\n  const [ onUnstake ] = useLiquidityUnstake(liquidityid, false, unstakeCallback)\n\n  const location = useLocation()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: liquidity.quoteToken.address,\n\n    tokenAddress: liquidity.token.address,\n  })\n  const addLiquidityUrl = `/#/add/${liquidityUrlPathParts}`\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceNumber = getBalanceNumber(stakedBalance)\n\n    if (stakedBalanceNumber > 0 && stakedBalanceNumber < 0.0001) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n\n    return stakedBalanceNumber.toLocaleString()\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={liquidity.symbol} decimals={18} setCallback={stakeModalCallbackSetting} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} decimals={18} tokenName={liquidity.symbol} setCallback={unstakeModalCallbackSetting} />)\n\n  const approveCallback = () =>\n  {\n    toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the farm!`)}`)\n       \n    setRequestedApproval(false)\n  }\n\n  const [ approveState, onApprove ] = useLiquidityApprove(liquidity, liquidityid, approveCallback)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n\n      await onApprove()\n\n      if (approveState ===  ApprovalState.UNKNOWN) {\n        // user rejected tx or didn't go thru\n        toastError(\n          `${t('Error')}`,\n          `${t(`Please try again. Confirm the transaction and make sure you are paying enough gas!`)}`,\n        )\n\n        setRequestedApproval(false)\n      }  else if (approveState === ApprovalState.APPROVED)\n      {\n        toastSuccess(`${t('Contract Enabled')}`, `${t(`You can now stake in the farm!`)}`)\n       \n        setRequestedApproval(false)\n      }\n\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, approveState, toastSuccess, toastError, t])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{liquidity.symbol} </Title>\n            <Subtle>{t('Staked')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance()}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Stake')} </Subtle>\n          <Title>{liquidity.symbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text, TimerIcon, Skeleton, Flex } from 'uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { CommunityTag, CoreTag } from 'components/Tags'\nimport { useBlock } from 'state/hooks'\nimport Balance from 'components/Balance'\nimport { LiquidityPoolWithStakedValue } from '../../Liquiditypoolcard/types'\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  liquidity: LiquidityProps\n  details: LiquidityPoolWithStakedValue\n  userDataReady: boolean\n  expanded: boolean\n}\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 500px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 500px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst Container = styled.div<{ expanded }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({\n  details,\n  apr,\n  liquidity,\n  userDataReady,\n  expanded,\n}) => {\n  const farm = details\n\n  const { t } = useTranslation()\n\n  const { currentBlock } = useBlock()\n\n  const { startBlock, endBlock } = farm\n\n  const shouldShowBlockCountdown = (startBlock > 0)\n\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n\n  const isActive = true\n\n  const { quoteToken, token } = farm.liquidity\n\n  const lpLabel = farm.liquidity.symbol && farm.liquidity.symbol.toUpperCase().replace('PANCAKE', '')\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n\n    tokenAddress: token.address,\n  })\n\n  return (\n    <Container expanded={expanded}>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`/#/add/${liquidityUrlPathParts}`}>\n              {t('getLP', { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n\n        <TagsContainer>\n          {farm.isCommunity ? <CommunityTag /> : <CoreTag />}\n        </TagsContainer>\n\n        {shouldShowBlockCountdown && (\n        <Flex mt=\"15px\" mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n          <Text small>{hasPoolStarted ? t('End') : t('Start')}:</Text>\n          <Flex alignItems=\"center\">\n            {blocksRemaining || blocksUntilStart ? (\n              <Balance\n                color=\"primary\"\n                fontSize=\"14px\"\n                value={hasPoolStarted ? blocksRemaining : blocksUntilStart}\n                decimals={0}\n              />\n            ) : (\n              <Skeleton width=\"54px\" height=\"21px\" />\n            )}\n            <Text ml=\"4px\" color=\"primary\" small>\n              {t('blocks')}\n            </Text>\n            <TimerIcon ml=\"4px\" color=\"primary\" />\n          </Flex>\n        </Flex>\n      )}\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} userDataReady={userDataReady} />\n        <StakedAction {...farm} userDataReady={userDataReady} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport { useFarmUser } from 'state/hooks'\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { LiquidityPoolWithStakedValue } from '../Liquiditypoolcard/types'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  liquidity: LiquidityProps\n  details: LiquidityPoolWithStakedValue\n}\n\ninterface RowPropsWithLoading extends RowProps {\n  userDataReady: boolean\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowPropsWithLoading> = (props) => {\n  const { details, userDataReady } = props\n\n  const hasStakedAmount = !!useFarmUser(details.liquidityid).stakedBalance.toNumber()\n\n  const [actionPanelExpanded, setActionPanelExpanded] = useState(hasStakedAmount)\n\n  const shouldRenderChild = useDelayedUnmount(actionPanelExpanded, 300)\n  \n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelExpanded(!actionPanelExpanded)\n  }\n\n  useEffect(() => {\n    setActionPanelExpanded(hasStakedAmount)\n  }, [hasStakedAmount])\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelExpanded} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], { ...props[key], userDataReady })}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Earned')}>\n                <Earned {...props.earned} userDataReady={userDataReady} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelExpanded} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {shouldRenderChild && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} expanded={actionPanelExpanded} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  userDataReady: boolean\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns, userDataReady } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} userDataReady={userDataReady} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  ButtonMenu,\n  ButtonMenuItem,\n  Flex,\n  NotificationDot,\n} from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst LiquiditypoolTab = ({ showHistory, setShowHistory, hasStakeInFinishedFarms }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex alignItems=\"center\" flexDirection={['column', null, 'row', null]}>\n        <ButtonMenu activeIndex={showHistory ? 1 : 0} onItemClick={(index) => setShowHistory(index === 1)} scale=\"sm\" variant=\"subtle\">\n          <ButtonMenuItem>\n            {t('Live')}\n          </ButtonMenuItem>\n          <NotificationDot show={hasStakeInFinishedFarms}>\n            <ButtonMenuItem>\n              {t('Finished')}\n            </ButtonMenuItem>\n          </NotificationDot>\n        </ButtonMenu>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default LiquiditypoolTab\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useMemo } from 'react'\nimport { Input } from 'uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback }) => {\n  const [toggled, setToggled] = useState(false)\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          value={searchText}\n          onChange={onChange}\n          placeholder={t(\"Search farms\")}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from 'uikit'\nimport { ViewMode } from './types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useActiveWeb3React } from 'hooks'\r\nimport { Heading, RowType, Toggle, Text } from 'uikit'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { useLiquidityPools, useGetApiPrices, useBlock } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { LiquidityPool } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { orderBy } from 'lodash'\r\nimport { latinise } from 'utils/latinise'\r\nimport FarmsPageHeader from 'components/FarmsPageHeader'\r\nimport { fetchFarmsPublicDataAsync } from 'state/liquiditypools'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Liquiditypoolcard from './components/Liquiditypoolcard/Liquiditypoolcard'\r\nimport { LiquidityPoolWithStakedValue } from './components/Liquiditypoolcard/types'\r\nimport Table from './components/Liquiditypooltable/FarmTable'\r\nimport LiquiditypoolTab from './LiquiditypoolTab'\r\nimport SearchInput from './components/SearchInput'\r\nimport { RowProps } from './components/Liquiditypooltable/Row'\r\nimport ToggleView from './components/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst Liquiditypools: React.FC = () => {\r\n  const { t } = useTranslation()\r\n\r\n  const { data: farmsLP, userDataLoaded } = useLiquidityPools()\r\n\r\n  const [query, setQuery] = useState('')\r\n\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, 'grampus_farm_view')\r\n\r\n  const [stakedOnly, setStakedOnly] = usePersistState(false, 'grampus_farm_pool_staked')\r\n\r\n  const [showHistory, setShowHistory] = usePersistState(true, 'grampus_farm_pool_history')\r\n\r\n  const { account } = useActiveWeb3React()\r\n\r\n  const [sortOption, setSortOption] = useState('hot')\r\n\r\n  const prices = useGetApiPrices()\r\n\r\n  const dispatch = useAppDispatch()\r\n\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync())\r\n\r\n    if (account) {\r\n     dispatch(fetchFarmUserDataAsync(account))  \r\n    }\r\n  }, [dispatch, account])\r\n\r\n  const { currentBlock } = useBlock()\r\n\r\n  const inactiveFarms = farmsLP.filter((farm) => (currentBlock >= farm.endBlock && farm.endBlock > 0))\r\n  \r\n  const activeFarms = farmsLP.filter((farm) => (currentBlock < farm.endBlock))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: LiquidityPool[]): LiquidityPoolWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: LiquidityPoolWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !prices) {\r\n          return farm\r\n        }\r\n\r\n        const quoteTokenPriceUsd = prices[farm.liquidity.quoteToken.address]\r\n\r\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\r\n\r\n        const apr = getFarmApr(prices[farm.earningToken.address], totalLiquidity, farm.rewardPerBlock) \r\n\r\n        return { ...farm, apr, liquidityvalue: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: LiquidityPoolWithStakedValue) => {\r\n          return latinise(farm.liquidity.symbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [prices, query],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n\r\n  const farmsStakedMemoized = useMemo(() => {\r\n    let farmsStaked = []\r\n\r\n    const sortFarms = (farms: LiquidityPoolWithStakedValue[]): LiquidityPoolWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: LiquidityPoolWithStakedValue) => farm.apr, 'desc')\r\n \r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: LiquidityPoolWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: LiquidityPoolWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (!showHistory) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n\r\n    if (showHistory) {\r\n      farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n\r\n    return sortFarms(farmsStaked).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    showHistory,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE)\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [farmsStakedMemoized, observerIsSet])\r\n\r\n  const rowData = farmsStakedMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm.liquidity\r\n\r\n    const tokenAddress = token.address\r\n\r\n    const quoteTokenAddress = quoteToken.address\r\n    \r\n    const lpLabel = farm.liquidity.symbol && farm.liquidity.symbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: farm.apr && farm.apr.toLocaleString('en-US', { maximumFractionDigits: 2 }),\r\n        lpLabel,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        originalValue: farm.apr,\r\n        earnTokenPrice: prices[farm.earningToken.address]\r\n      },\r\n\r\n      farm: {\r\n        image: farm.liquidity.symbol.split(' ')[0].toLocaleLowerCase(),\r\n        label: lpLabel,\r\n        liquidityid: farm.liquidityid,\r\n      },\r\n\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings), farm.earningToken.decimals),\r\n        liquidityid: farm.liquidityid,\r\n      },\r\n\r\n      liquidity: {\r\n        liquidityvalue: farm.liquidityvalue,\r\n      },\r\n\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <div>\r\n          { !showHistory ? \r\n                <FlexLayout>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <Liquiditypoolcard key={farm.liquidityid} earnTokenPrice={prices[farm.earningToken.address]} liquidity={farm} account={account} removed={false} />\r\n            ))}\r\n           </FlexLayout>\r\n         :         <FlexLayout>\r\n            {farmsStakedMemoized.map((farm) => (\r\n              <Liquiditypoolcard key={farm.liquidityid} earnTokenPrice={prices[farm.earningToken.address]} liquidity={farm} account={account} removed />\r\n            ))}\r\n         </FlexLayout>\r\n         }\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <FarmsPageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('Liquidity Pools')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake lp tokens to earn new tokens')}\r\n        </Heading>\r\n      </FarmsPageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <LiquiditypoolTab showHistory={showHistory} setShowHistory={setShowHistory} hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text>{t(\"Sort by\")}</Text>\r\n              <Select\r\n                options={[\r\n                  {\r\n                    label: t('Hot'),\r\n                    value: 'hot',\r\n                  },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text>{t(\"Search\")}</Text>\r\n              <SearchInput onChange={handleChangeQuery} />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        <div ref={loadMoreRef} />\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n \r\nexport default Liquiditypools","import React from 'react'\r\nimport { useFetchPublicData } from 'state/hooks'\r\nimport Liquiditypools from './Liquiditypools'\r\n\r\nconst Liquiditypoolsagent : React.FC = () => {\r\n    useFetchPublicData()\r\n\r\n    return (\r\n     <>\r\n       <Liquiditypools />\r\n     </>\r\n    );\r\n}\r\n\r\nexport default Liquiditypoolsagent","import React from 'react'\r\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\r\nimport Liquiditypoolsagent from './Liquiditypoolsagent'\r\n\r\nconst Liquiditypoolwrapper: React.FC = () => {\r\n    return (\r\n      <RefreshContextProvider>\r\n        <Liquiditypoolsagent />\r\n      </RefreshContextProvider>\r\n    );\r\n}\r\n\r\nexport default Liquiditypoolwrapper"],"sourceRoot":""}